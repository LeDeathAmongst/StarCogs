from Star_Utils import Cog
from Star_Utils import CogsUtils
from redbot.core import commands
from redbot.core.i18n import Translator
import discord
import typing
import asyncio
import io
import textwrap
from redbot.core.dev_commands import START_CODE_BLOCK_RE
_: Translator = Translator('Dev', __file__)


def cleanup_code(code: str) ->str:
    if code.startswith('```') and code.endswith('```'):
        code = START_CODE_BLOCK_RE.sub('', code)[:-3].rstrip('\n')
    else:
        code = code.strip('\n`')
    code = textwrap.dedent(code)
    with io.StringIO(code) as codeio:
        for line in codeio:
            line = line.strip()
            if line and not line.startswith('#'):
                break
        else:
            return 'pass'
    return code


class ExecuteModal(discord.ui.Modal):

    def __init__(self, cog: Cog, ctx: commands.Context, choice: typing.
        Literal['debug', 'eval']='eval') ->None:
        self.cog: Cog = cog
        self.ctx: commands.Context = ctx
        self.choice: typing.Literal['debug', 'eval'] = choice
        super().__init__(title=_('Execute') + ' ' + self.choice.title(),
            timeout=60 * 10)
        self.code: discord.ui.TextInput = discord.ui.TextInput(label=_(
            'Code to Execute'), style=discord.TextStyle.long, placeholder=_
            ('Write your code here...'), required=True)
        self.add_item(self.code)

    async def on_submit(self, interaction: discord.Interaction) ->None:
        await interaction.response.defer()
        context = getattr(self.ctx, 'original_context', self.ctx)
        context.interaction = interaction
        code = self.code.value
        source = cleanup_code(code)
        await self.cog.my_exec(context, type='debug', source=source,
            send_result=True)


class ExecuteView(discord.ui.View):

    def __init__(self, cog: Cog) ->None:
        super().__init__(timeout=180)
        self.cog: Cog = cog
        self.ctx: commands.Context = None
        self._message: discord.Message = None
        self._ready: asyncio.Event = asyncio.Event()

    async def start(self, ctx: commands.Context) ->None:
        self.ctx: commands.Context = ctx
        self._message: discord.Message = await self.ctx.send(view=self)
        self.cog.views[self._message] = self
        await self._ready.wait()
        return self._message

    async def interaction_check(self, interaction: discord.Interaction) ->bool:
        if interaction.user.id not in [self.ctx.author.id] + list(self.ctx.
            bot.owner_ids):
            await interaction.response.send_message(_(
                'You are not allowed to use this interaction.'), ephemeral=True
                )
            return False
        return True

    async def on_timeout(self) ->None:
        for child in self.children:
            child: discord.ui.Item
            if hasattr(child, 'disabled') and not (isinstance(child,
                discord.ui.Button) and child.style == discord.ButtonStyle.url):
                child.disabled = True
        try:
            await self._message.edit(view=self)
        except discord.HTTPException:
            pass
        self._ready.set()

    @discord.ui.button(label=_('Execute Debug'), custom_id='execute_debug')
    async def execute_debug(self, interaction: discord.Interaction, button:
        discord.ui.Button) ->None:
        await interaction.response.send_modal(ExecuteModal(cog=self.cog,
            ctx=self.ctx, choice='debug'))

    @discord.ui.button(label=_('Execute Eval'), custom_id='execute_eval')
    async def execute_eval(self, interaction: discord.Interaction, button:
        discord.ui.Button) ->None:
        await interaction.response.send_modal(ExecuteModal(cog=self.cog,
            ctx=self.ctx, choice='eval'))

    @discord.ui.button(style=discord.ButtonStyle.danger, emoji='✖️',
        custom_id='close_page')
    async def close_page(self, interaction: discord.Interaction, button:
        discord.ui.Button) ->None:
        try:
            await interaction.response.defer()
        except discord.errors.NotFound:
            pass
        self.stop()
        await CogsUtils.delete_message(self._message)
        self._ready.set()

msgid ""
msgstr ""
"Project-Id-Version: aaa3a-cogs\n"
"POT-Creation-Date: 2024-07-20 22:14+0200\n"
"PO-Revision-Date: 2024-07-21 15:16\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: redgettext 3.4.2\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: aaa3a-cogs\n"
"X-Crowdin-Project-ID: 531090\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /[AAA3A-AAA3A.AAA3A-cogs] main/dev/locales/messages.pot\n"
"X-Crowdin-File-ID: 263\n"
"Language: fr_FR\n"

#: dev\dev.py:468
#, docstring
msgid "Various development focused utilities!"
msgstr "Divers utilitaires axés sur le développement !"

#: dev\dev.py:745 dev\dev.py:807 dev\dev.py:1014
msgid "Unreadable attachment with `utf-8`."
msgstr "Pièce jointe illisible avec `utf-8`."

#: dev\dev.py:762
msgid "This message isn't reachable."
msgstr "Ce message n'est pas accessible."

#: dev\dev.py:868
msgid "Already running a REPL session in this channel. Exit it with `quit`."
msgstr "Une session REPL est déjà en cours dans ce canal. Quittez-la avec `quit`."

#: dev\dev.py:872
msgid "Already running a REPL session in this channel. Resume the REPL with `{prefix}replresume`."
msgstr "Une session REPL est déjà en cours dans ce canal. Reprenez la REPL avec `{prefix}replresume`."

#: dev\dev.py:884
msgid "Enter code to execute or evaluate. `exit()` or `quit` to exit. `{prefix}replpause` to pause."
msgstr "Entrez le code à exécuter ou à évaluer. `exit()` ou `quit` pour quitter. `{prefix}replpause` pour faire une pause."

#: dev\dev.py:929
msgid "Exiting."
msgstr "Sortie."

#: dev\dev.py:937
msgid "There is no currently running REPL session in this channel."
msgstr "Il n'y a pas de session REPL en cours dans ce canal."

#: dev\dev.py:943
msgid "The REPL session in this channel has been resumed."
msgstr "La session REPL de ce canal a été reprise."

#: dev\dev.py:945
msgid "The REPL session in this channel is now paused."
msgstr "La session REPL de ce canal est maintenant en pause."

#: dev\dev.py:967
msgid "Bot owners will now bypass all commands with cooldowns{optional_duration}."
msgstr "Les propriétaires de bots contourneront désormais toutes les commandes avec des temps de recharge{optional_duration}."

#: dev\dev.py:977
msgid "Bot owners will no longer bypass all commands with cooldowns{optional_duration}."
msgstr "Les propriétaires de bots ne pourront plus contourner toutes les commandes ayant un temps de recharge{optional_duration}."

#: dev\dev.py:1103
#, docstring
msgid "Display all Dev environment values."
msgstr "Afficher toutes les valeurs de l'environnement Dev."

#: dev\dev.py:1112
#, docstring
msgid "Reset its own locals in evals."
msgstr "Réinitialiser ses propres locaux dans les évaluations."

#: dev\view.py:38
msgid "Execute"
msgstr "Exécuter"

#: dev\view.py:40
msgid "Code to Execute"
msgstr "Code à exécuter"

#: dev\view.py:42
msgid "Write your code here..."
msgstr "Ecrivez votre code ici..."