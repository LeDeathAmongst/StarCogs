{
  "Bumper": {
    "revokeprem": "Revoke a premium code.",
    "revokepremserver": "Revoke premium status from a server.",
    "redeem": "Redeem a premium code.",
    "bumper": "Send the bump message to all servers with a configured bump channel.",
    "bumprep": "Group command for handling bump reports.",
    "bumpset": "Group command to set bump configuration.",
    "bumpowner": "Owner-only bump configuration.",
    "mycodes": "List all premium codes assigned to the user.",
    "codegen": "Generate premium codes. Use -1 for permanent, or specify time and unit (e.g., 1d for 1 day, 1m for 1 month)."
  },
  "NotSoBot": {
    "rip": "Generate tombstone image with name and optional text",
    "merge": "Merge/Combine Two Photos\n\n`[vertical=True]` `true` or `false` to merge vertically.\n`[urls]` The Image URL's you want to merge together. If not supplied\nimages are searched from message history.",
    "gmagik": "Attempt to do magik on a gif",
    "emojify": "Replace characters in text with emojis",
    "jpeg": "Add more JPEG to an Image\n\nNeeds More JPEG!\n`[urls]` is optional, if not provided will search chat for a valid image.\n`[quality]` is the quality of the new jpeg image to make",
    "magik": "Apply magik to an image.",
    "vw": "Add vaporwave flavours to an image",
    "minecraftachievement": "Generate a Minecraft Achievement",
    "watermark": "Add a watermark to an image\n\n`[urls]` are the image urls or users or previous images in chat to add a watermark to.\n`[mark]` is the image to use as the watermark. By default the brazzers icon is used.\n`[x=0]` is the height the watermark will be at between 0 and 100% where 0 is the top and 100 is the bottom of the image.\n`[y=0]` is the width the watermark will be at between 0 and 100% where 0 is the left and 100 is the right of the image.\n`[transparency=0]` is a value from 0 to 100 which determines the percentage the watermark will be transparent.",
    "glitch": "Glitch a gif or png",
    "pixelate": "Pixelate an image",
    "waaw": "Mirror an image vertically right to left",
    "haah": "Mirror an image vertically left to right",
    "woow": "Mirror an image horizontally top to bottom",
    "hooh": "Mirror an image horizontally bottom to top",
    "flipimg": "Rotate an image 180 degrees",
    "flop": "Flip an image horizontally",
    "invert": "Invert the colours of an image",
    "rotate": "Rotate image X degrees",
    "ascii": "Convert text into ASCII",
    "aesthetics": "Returns inputed text in aesthetics",
    "triggered": "Generate a Triggered GIF for a user or image",
    "caption": "Add caption to an image\n\n`[urls]` are the image urls or users or previous images in chat to add a caption to.\n`[text=Caption]` is the text to caption on the image.\n`[color=white]` is the color of the text.\n`[size=40]` is the size of the text\n`[x=0]` is the height the text starts at between 0 and 100% where 0 is the top and 100 is the bottom of the image.\n`[y=0]` is the width the text starts at between 0 and 100% where 0 is the left and 100 is the right of the image.",
    "iascii": "Generate an ascii art image of last image in chat or from URL",
    "gascii": "Gif to ASCII"
  },
  "Praise": {
    "praise": "Praise a user with a default or custom message."
  },
  "CommandChart": {
    "commandchart": "See the used commands in a certain channel within a certain amount of messages."
  },
  "KoFiTracker": {
    "setkofitracker": "Commands to configure KoFiTracker.",
    "kofiprofile": "Get the details of a KoFi profile."
  },
  "StickyMember": {
    "unstickymem": "No description available.",
    "stickymem": "No description available."
  },
  "Perform": {
    "feed": "Feed multiple users!",
    "smug": "Be smug towards someone!",
    "cry": "Start crying!",
    "slap": "Slap multiple users!",
    "lick": "Lick multiple users!",
    "tickle": "Tickle multiple users!",
    "sleep": "Act sleepy!",
    "plead": "Plead to multiple users!",
    "blush": "Act blush!",
    "pout": "Act pout!",
    "hug": "Hug multiple users!",
    "spank": "Spank multiple users!",
    "punch": "Punch multiple users!",
    "highfive": "Highfive multiple users!",
    "amazed": "Act amazed!",
    "confuse": "Act confused!",
    "clap": "Clap for someone!",
    "love": "Love multiple users!",
    "kill": "Kill multiple users!",
    "headdesk": "Do a facedesk!",
    "pokes": "Poke multiple users!",
    "facepalm": "Do a facepalm!",
    "lonely": "Act lonely!",
    "dance": "Start dancing!",
    "bite": "Bite multiple users!",
    "peek": "Start lurking!",
    "hide": "Hide yourself!",
    "laugh": "Start laughing!",
    "cute": "Act cute!",
    "happy": "Act happy!",
    "yeet": "Yeet multiple users!",
    "dodge": "Dodge something!",
    "scream": "Start screaming!",
    "cuddle": "Cuddle multiple users!",
    "scared": "Act scared!",
    "run": "Start running!",
    "mad": "Act angry!",
    "protect": "Protect multiple users!",
    "nosebleed": "Start bleeding from nose!",
    "shrug": "Start shrugging!",
    "stare": "Stare at someone!",
    "wave": "Wave to multiple users!",
    "nutkick": "Kick multiple users in the nuts!",
    "performapi": "Steps to get the API token needed for few commands.",
    "performstats": "View your roleplay stats",
    "performset": "Settings for roleplay stats",
    "kiss": "Kiss multiple users!",
    "pat": "Pat multiple users!"
  },
  "Unbelievaboat": {
    "work": "Work for some cash.",
    "crime": "Commit a crime, more risk but higher payout.",
    "rob": "Rob another user.",
    "unbset": "Manage various settings for Unbelievaboat.",
    "cooldowns": "List your remaining cooldowns..",
    "roulette": "Bet on the roulette wheel.\n\n**Current supported bets**:\nSingle   - Any single number.\nColors   - Red/Black\nHalfs    - 1st/2nd half\nEven Odd - Even or Odd\nDozens   - 1st/2nd/3rd Dozen (Groups of 12)\nColums   - 1st/2nd/3rd Column.\n- This is based on the English version of the roulette wheel.",
    "rouletteset": "Manage settings for roulette.",
    "wallet": "Wallet commands.",
    "deposit": "Deposit cash from your wallet to your bank.",
    "withdraw": "Withdraw cash from your bank to your wallet.",
    "addmoneyrole": "Add money to the balance of all users within a role.\n\nValid arguements are 'banks' or 'wallet'.",
    "removemoneyrole": "Remove money from the bank balance of all users within a role.\n\nValid arguements are 'banks' or 'wallet'."
  },
  "ConversationGames": {
    "dare": "Dare questions, optionally ask dare questions to members!",
    "wouldyourather": "Would you rather?",
    "paranoia": "Paranoia questions.",
    "truth": "Truth questions, optionally ask truth questions to members!",
    "neverhaveiever": "Never have I ever.",
    "cgset": "Configurating options for Conversation Games."
  },
  "Targeter": {
    "target": "Targets users based on the passed arguments.\n\nRun `[p]target help` to see a list of valid arguments."
  },
  "FakeMod": {
    "kik": "Fake kick a member.",
    "ben": "Fake ban a user.",
    "myut": "Fake mute a member.",
    "unben": "Fake unban a user.",
    "worn": "Fake warn a member for the specified reason.",
    "unworn": "Fake unwarn a member for the specified reason.",
    "unmyut": "Fake unmute a member.",
    "fakemodlogset": "Manage fake modlog settings."
  },
  "LinkQuoter": {
    "linkquote": "Quote a message from a link.",
    "setlinkquoter": "Commands to configure LinkQuoter."
  },
  "InfiniCount": {
    "infinicount": "Commands for managing InfiniCount."
  },
  "Applications": {
    "apps": "Manage application types and questions.",
    "apply": "Start a new application.",
    "appstats": "View application statistics.",
    "appsearch": "Search for applications by user or type.",
    "appset": "Configure the application system.",
    "createapplyembed": "Create an embed with a dropdown for users to start applications."
  },
  "Downloader": {
    "cog": "Base command for cog installation management commands.",
    "updr": "Update cogs and reload immediately.\n\nExamples:\n- `[p]updr`\n- `[p]updr defender`\n\n**Arguments**\n\n- `[cogs...]` The cog or cogs to update. If omitted, all cogs are updated.",
    "updrall": "Update all repositories and their cogs if updates are available.",
    "findcog": "Find which cog a command comes from.\n\nThis will only work with loaded cogs.\n\nExample:\n- `[p]findcog ping`\n\n**Arguments**\n\n- `<command_name>` The command to search for.",
    "repo": "Base command for repository management.",
    "pipinstall": "Install a group of dependencies using pip.\n\nExamples:\n- `[p]pipinstall bs4`\n- `[p]pipinstall py-cpuinfo psutil`\n\nImproper usage of this command can break your bot, be careful.\n\n**Arguments**\n\n- `<deps...>` The package or packages you wish to install."
  },
  "Reports": {
    "reportdm": "Enables/Disables the messages the bot sends on report\n\nBy default this changes depending on your current setting.",
    "report": "Report a member\n\nExample: !report @SharkyTheKing#0001 Not being fishy enough.\n\nArguments:\n`member`: The Discord member you want to report\n`reason`: The reason for the report",
    "reportset": "Manage reports system"
  },
  "Reminders": {
    "reminder": "List, edit and delete existing reminders, or create FIFO/commands or Say reminders.",
    "remindme": "Create a reminder with optional reminder text or message.\n\nThe specified time can be fuzzy parsed or use the kwargs `in`, `on` and `every` to find a repeat rule and your text.\nYou don't have to put quotes around the `time` argument. For more precise parsing, you can place quotation marks around the text. Put quotation marks around the time too, if it contains spaces.\nUse `[p]reminder timetips` to display tips for time parsing.\n\n**Examples:**\n- `[p]remindme in 8min45sec to do that thing`\n- `[p]remindme to water my plants in 2 hours`\n- `[p]remindme in 3 days`\n- `[p]remindme 8h`\n- `[p]remindme every 1 week to take out the trash`\n- `[p]remindme in 1 hour <message_link>`\n- `[p]remindme at 10h to add some feature to my codes`",
    "setreminders": "Configure Reminders.",
    "remind": "Create a reminder with optional reminder text or message, in a channel with an user/role ping.\n\nThe specified time can be fuzzy parsed or use the kwargs `in`, `on` and `every` to find a repeat rule and your text.\nYou don't have to put quotes around the `time` argument. For more precise parsing, you can place quotation marks around the text. Put quotation marks around the time too, if it contains spaces.\nUse `[p]reminder timetips` to display tips for time parsing.\n\nExamples:\n- `[p]remind #destination @user1 @user2 @user2 in 2 hours to buy a gift`"
  },
  "CustomGlobalCommands": {
    "agcom": "Create aliases for Global Custom Commands",
    "rmgcom": "Removes a global custom command",
    "lsgcom": "Shows global custom commands list",
    "setgcom": "Adds a global custom command"
  },
  "Core": {
    "leave": "Leaves servers.\n\nIf no server IDs are passed the local server will be left instead.\n\nNote: This command is interactive.\n\n**Examples:**\n- `[p]leave` - Leave the current server.\n- `[p]leave \"Red - Discord Bot\"` - Quotes are necessary when there are spaces in the name.\n- `[p]leave 133049272517001216 240154543684321280` - Leaves multiple servers, using IDs.\n\n**Arguments:**\n- `[servers...]` - The servers to leave. When blank, attempts to leave the current server.",
    "servers": "Lists the servers [botname] is currently in.\n\nNote: This command is interactive.",
    "load": "Loads cog packages from the local paths and installed cogs.\n\nSee packages available to load with `[p]cogs`.\n\nAdditional cogs can be added using Downloader, or from local paths using `[p]addpath`.\n\n**Examples:**\n- `[p]load general` - Loads the `general` cog.\n- `[p]load admin mod mutes` - Loads multiple cogs.\n\n**Arguments:**\n- `<cogs...>` - The cog packages to load.",
    "unload": "Unloads previously loaded cog packages.\n\nSee packages available to unload with `[p]cogs`.\n\n**Examples:**\n- `[p]unload general` - Unloads the `general` cog.\n- `[p]unload admin mod mutes` - Unloads multiple cogs.\n\n**Arguments:**\n- `<cogs...>` - The cog packages to unload.",
    "reload": "Reloads cog packages.\n\nThis will unload and then load the specified cogs.\n\nCogs that were not loaded will only be loaded.\n\n**Examples:**\n- `[p]reload general` - Unloads then loads the `general` cog.\n- `[p]reload admin mod mutes` - Unloads then loads multiple cogs.\n\n**Arguments:**\n- `<cogs...>` - The cog packages to reload.",
    "command": "Commands to enable and disable commands and cogs.",
    "slash": "Base command for managing what application commands are able to be used on [botname].",
    "embedset": "Commands for toggling embeds on or off.\n\nThis setting determines whether or not to use embeds as a response to a command (for commands that support it).\nThe default is to use embeds.\n\nThe embed settings are checked until the first True/False in this order:\n\n- In guild context:\n  1. Channel override - `[p]embedset channel`\n  2. Server command override - `[p]embedset command server`\n  3. Server override - `[p]embedset server`\n  4. Global command override - `[p]embedset command global`\n  5. Global setting  -`[p]embedset global`\n\n- In DM context:\n  1. User override - `[p]embedset user`\n  2. Global command override - `[p]embedset command global`\n  3. Global setting - `[p]embedset global`",
    "modlogset": "Manage modlog settings.",
    "shutdown": "Shuts down the bot.\n\nAllows [botname] to shut down gracefully.\n\nThis is the recommended method for shutting down the bot.\n\n**Examples:**\n- `[p]shutdown`\n- `[p]shutdown True` - Shutdowns directly.\n\n**Arguments:**\n- `[directly]` - Whether to shutdown directly without confirmation. Defaults to False.",
    "restart": "Attempts to restart [botname].\n\nMakes [botname] quit with exit code 26.\nThe restart is not guaranteed: it must be dealt with by the process manager in use.\n\n**Examples:**\n- `[p]restart`\n- `[p]restart True` - Restarts directly.\n\n**Arguments:**\n- `[directly]` - Whether to restart directly without confirmation. Defaults to False.",
    "set": "Commands for changing [botname]'s settings.",
    "mydata": "Commands which interact with the data [botname] has about you.\n\nMore information can be found in the [End User Data Documentation.](https://docs.discord.red/en/stable/red_core_data_statement.html)",
    "bankset": "Base command for bank settings.",
    "inviteset": "Commands to setup [botname]'s invite settings.",
    "debuginfo": "Shows debug information useful for debugging.",
    "diagnoseissues": "Diagnose issues with the command checks with ease!\n\nIf you want to diagnose the command from a text channel in a different server,\nyou can do so by using the command in DMs.\n\n**Example:**\n- `[p]diagnoseissues #general @Slime ban` - Diagnose why @Slime can't use `[p]ban` in #general channel.\n\n**Arguments:**\n- `[channel]` - The text channel that the command should be tested for. Defaults to the current channel.\n- `<member>` - The member that should be considered as the command caller.\n- `<command_name>` - The name of the command to test.",
    "helpset": "Commands to manage settings for the help command.\n\nAll help settings are applied globally.",
    "info": "Shows info about something",
    "autoimmune": "Commands to manage server settings for immunity from automated actions.\n\nThis includes duplicate message deletion and mention spam from the Mod cog, and filters from the Filter cog.",
    "ignore": "Commands to add servers or channels to the ignore list.\n\nThe ignore list will prevent the bot from responding to commands in the configured locations.\n\nNote: Owners and Admins override the ignore list.",
    "unignore": "Commands to remove servers or channels from the ignore list.",
    "contact": "Sends a message to the owner.\n\nThis is limited to one message every 60 seconds per person.\n\n**Example:**\n- `[p]contact Help! The bot has become sentient!`\n\n**Arguments:**\n- `[message]` - The message to send to the owner.",
    "dm": "Sends a DM to a user.\n\nThis command needs a user ID to work.\n\nTo get a user ID, go to Discord's settings and open the 'Appearance' tab.\nEnable 'Developer Mode', then right click a user and click on 'Copy ID'.\n\n**Example:**\n- `[p]dm 262626262626262626 Do you like me? Yes / No`\n\n**Arguments:**\n- `[message]` - The message to dm to the user.",
    "datapath": "Prints the bot's data path."
  },
  "Jokes": {
    "joke": "Get a random joke.",
    "pun": "Get a random pun.",
    "darkjoke": "Get a random dark joke.",
    "twopart": "Get a random 2 part joke.",
    "jokesearch": "Search for a random joke with a specific query.",
    "multijoke": "Get multiple random joke(s).\n\n10 is the max number of jokes you can get at once.",
    "devjoke": "Get a random dev joke.",
    "onepart": "Get a random 1 part joke."
  },
  "TimeChannel": {
    "timezones": "See the time in all the configured timezones for this server.",
    "timechannelset": "Manage channels which will show the time for a timezone.",
    "timechannelinfo": "No description available."
  },
  "Autoreact": {
    "autoreact": "Reacts to specific text with an emoji.",
    "coreact": "Copies other people's reactions to recent messages."
  },
  "IntroCog": {
    "intro": "Manage your introduction."
  },
  "InviteSettings": {
    "support": "Send an embed with a support server invite link button.",
    "invite": "Show all set invites or manage invite links."
  },
  "Cashdrop": {
    "cashdrop": "Manage the cashdrop"
  },
  "TierLists": {
    "tierlistset": "Tierlist settings"
  },
  "Cloudflare": {
    "urlscanner": "With Cloudflare’s URL Scanner, you have the ability to investigate the details of a domain, IP, URL, or ASN. Cloudflare’s URL Scanner is available in the Security Center of the Cloudflare dashboard, Cloudflare Radar and the Cloudflare API.\n\nLearn more at https://developers.cloudflare.com/radar/investigate/url-scanner/",
    "hyperdrive": "Hyperdrive is a service that accelerates queries you make to existing databases, making it faster to access your data from across the globe, irrespective of your users’ location. Learn more at https://developers.cloudflare.com/hyperdrive/",
    "emailrouting": "Cloudflare Email Routing is designed to simplify the way you create and manage email addresses, without needing to keep an eye on additional mailboxes. Learn more at https://developers.cloudflare.com/email-routing/",
    "r2": "Cloudflare R2 Storage allows developers to store large amounts of unstructured data without the costly egress bandwidth fees associated with typical cloud storage services. \n\nLearn more at https://developers.cloudflare.com/r2/",
    "loadbalancing": "Cloudflare Load Balancing distributes traffic across your servers, which reduces server strain and latency and improves the experience for end users. Learn more at https://developers.cloudflare.com/load-balancing/",
    "dnssec": "DNSSEC info",
    "keystore": "Fetch keys in use for development purposes only",
    "botmanagement": "Cloudflare bot solutions identify and mitigate automated traffic to protect your domain from bad bots. Learn more at https://developers.cloudflare.com/bots/",
    "zones": "Cloudflare command group.",
    "intel": "Cloudforce One packages the vital aspects of modern threat intelligence and operations to make organizations smarter, more responsive, and more secure. Learn more at https://www.cloudflare.com/application-services/products/cloudforceone/",
    "images": "Cloudflare Images provides an end-to-end solution to build and maintain your image infrastructure from one API. Learn more at https://developers.cloudflare.com/images/"
  },
  "AddImage": {
    "addimage": "Add an image for the bot to directly upload"
  },
  "ButtonPoll": {
    "buttonpoll": "Start a button-based poll\n\nThis is an interactive setup. By default the current channel will be used,\nbut if you want to start a poll remotely you can send the channel name\nalong with the buttonpoll command.\n\n**Examples:**\n- `[p]buttonpoll` - start a poll in the current channel\n- `[p]buttonpoll #polls` start a poll somewhere else",
    "advstartpoll": "Advanced users: create a pull using command arguments\n\nThe help text for this command is too long to fit in the help command. Just run\n`[p]advstartpoll` to see it.",
    "buttonpollinfo": "No description available.",
    "getvoters": "Fetch the current voters for a running poll\n\n**Arguments**\n- `message_id`: (integer) The ID of the poll message",
    "endpoll": "End a currently running poll\n\n**Arguments**\n- `message_id`: (integer) The ID of the poll message",
    "listpolls": "List all currently running polls"
  },
  "RestartMsg": {
    "warnrestart": "Send a message to all Server Owners, except those in the ignore list, and restart the bot.",
    "ignoreowner": "Add a server's owner to the ignore list.",
    "unignoreowner": "Remove a server's owner from the ignore list.",
    "testmsg": "Send a test message to a specific Server Owner without restarting the bot."
  },
  "Sesh": {
    "sesh": "Group command for managing smoking sessions."
  },
  "Sleep": {
    "eep": "Put the bot to sleep",
    "wake": "Wake the bot up"
  },
  "AutoRoom": {
    "autoroomset": "Configure the AutoRoom cog.\n\nFor a quick rundown on how to get started with this cog,\ncheck out [the readme](https://github.com/PhasecoreX/PCXCogs/tree/master/autoroom/README.md)",
    "autoroom": "Manage your AutoRoom.\n\nFor a quick rundown on how to manage your AutoRoom,\ncheck out [the readme](https://github.com/PhasecoreX/PCXCogs/tree/master/autoroom/README.md)"
  },
  "Filter": {
    "filter": "Base command to add or remove words from the server filter.\n\nUse double quotes to add or remove sentences.",
    "filterset": "Base command to manage filter settings."
  },
  "SeinaTools": {
    "botstat": "Yet another botstat command for [botname].",
    "screenshot": "Screenshots a given url directly inside discord.",
    "removebackground": "Remove background from image url.",
    "spotify": "View the specified (defaults to author) user's now playing spotify status from their discord activity.",
    "crates": "Get information about a package in Crates.io.",
    "whatplaying": "Closer lookup on what the specified user is playing.",
    "npm": "Get information about a node.js module.",
    "ruby": "Get information about a rubygem package.",
    "spy": "Yet another fun spy command."
  },
  "Jsonrequest": {
    "setjsonrequest": "Change the configurations for [p]jsonrequest\n\nAll configurations are server-based.\n\nBy default, all domains are allowed. When you add a domain below, the settings switch to a whitelist model where only added domains will work.",
    "jsonrequest": "Makes a json request"
  },
  "GuessTheNumber": {
    "gtn": "Start a gtn event."
  },
  "CustomPing": {
    "pingset": "Manage CustomPing settings.",
    "ping": "View bot latency."
  },
  "Webhook": {
    "webhook": "Various webhook commands to create and send messages along webhooks."
  },
  "GuildLog": {
    "guildlogset": "Configure GuildLog Settings"
  },
  "VrtUtils": {
    "pull": "Auto update & reload cogs",
    "zip": "zip a file or files",
    "unzip": "Unzips a zip file and sends the extracted files in the channel",
    "wipethreads": "Clear all threads from a server",
    "emojidata": "Get info about an emoji",
    "exportchat": "Export chat history to an html file",
    "botemojis": "Add/Edit/List/Delete bot emojis",
    "getsource": "Get the source code of a command",
    "throwerror": "Throw an unhandled exception\n\nA zero division error will be raised",
    "todorefresh": "Refresh a todo list channel.\n\nBring all messages without a ✅ or ❌ to the front of the channel.\n\n**WARNING**: DO NOT USE THIS COMMAND IN A BUSY CHANNEL.",
    "quickpull": "Auto update & reload cogs WITHOUT updating dependencies",
    "pip": "Run a pip command from within your bots venv",
    "text2binary": "Convert text to binary",
    "runshell": "Run a shell command from within your bots venv",
    "guilds": "View guilds your bot is in",
    "binary2text": "Convert a binary string to text",
    "botinfo": "Get info about the bot",
    "botip": "Get the bots public IP address (in DMs)",
    "randomnum": "Generate a random number between the numbers specified",
    "ispeed": "Run an internet speed test.\n\nKeep in mind that this speedtest is single threaded and may not be accurate!\n\nBased on PhasecoreX's [netspeed](https://github.com/PhasecoreX/PCXCogs/tree/master/netspeed) cog",
    "reactmsg": "Add a reaction to a message",
    "logs": "View the bot's logs.",
    "shared": "View members in a specified server that are also in this server",
    "diskspeed": "Get disk R/W performance for the server your bot is on\n\nThe results of this test may vary, Python isn't fast enough for this kind of byte-by-byte writing,\nand the file buffering and similar adds too much overhead.\nStill this can give a good idea of where the bot is at I/O wise.",
    "botshared": "View servers that the bot and a user are both in together\n\nDoes not include the server this command is run in",
    "isownerof": "Get a list of servers the specified user is the owner of",
    "viewapikeys": "DM yourself the bot's API keys",
    "closestuser": "Find the closest fuzzy match for a user",
    "cleantmp": "Cleanup all the `.tmp` files left behind by Red's config",
    "getguildid": "Find a guild by name or ID",
    "cogsizes": "View the storage space each cog's saved data is taking up",
    "getchannel": "Find a channel by ID",
    "getmessage": "Fetch a channelID-MessageID combo and display the message",
    "codesizes": "View the storage space each cog's code is taking up",
    "getuser": "Find a user by ID",
    "getbanner": "Get a user's banner",
    "getwebhook": "Find a webhook by ID",
    "usersjson": "Get a json file containing all non-bot usernames/ID's in this guild",
    "oldestchannels": "See which channel is the oldest",
    "oldestmembers": "See which users have been in the server the longest\n\n**Arguments**\n`amount:` how many members to display\n`include_bots:` (True/False) whether to include bots",
    "oldestaccounts": "See which users have the oldest Discord accounts\n\n**Arguments**\n`amount:` how many members to display\n`include_bots:` (True/False) whether to include bots",
    "rolemembers": "View all members that have a specific role",
    "wipevcs": "Clear all voice channels from a server"
  },
  "WordScramble": {
    "wordscrambleset": "Set options for Word Scramble",
    "wordscramble": "Start a game of WordScramble"
  },
  "Scanner": {
    "scanner": "Group command for changing scanner's settings."
  },
  "ReviewsCog": {
    "review": "Review commands."
  },
  "HidePing": {
    "hideping": "Speak a message using a hidden ping!"
  },
  "InstaDelete": {
    "toggleinstadelete": "Toggle instant deletion of commands for the user in the current server."
  },
  "GlobalBan": {
    "globalunban": "Globally unban a user.",
    "globalban": "Globally ban a user."
  },
  "PyLavLocalFiles": {
    "pllocalset": "Configure cog settings"
  },
  "DiscordModals": {
    "discordmodals": "Group of commands to use DiscordModals."
  },
  "RuleManager": {
    "showrules": "Show all rules for the server.",
    "addrule": "Add a rule to the server's rule list.",
    "editrule": "Edit a rule by its ID.",
    "removerule": "Remove a rule by its ID.",
    "resetrules": "Reset all rules for the server.",
    "postrules": "Post the rules to a specific channel and set it for dynamic updates."
  },
  "PyLavNotifier": {
    "plnotifier": "Configure the PyLavNotifier cog"
  },
  "AdminToggle": {
    "toggleadmin": "Toggle my admin ability on or off",
    "admintoggle": "Commands for Admin Toggle settings"
  },
  "CtrlZ": {
    "ctrlz": "Revert some actions in servers, from the audit logs."
  },
  "Minesweeper": {
    "minesweeper": "Starts a game of minesweeper.\n\nYou can specify the amount of wanted bombs using the bomb paramater.  It must be between 10 bombs and 99 bombs, and defaults to random between 15 to 25.",
    "spoilerms": "Starts a non-interactive game of minesweeper with spoilers.\n\nYou can specify the amount of wanted bombs using the bomb paramater.  It must be between 10 bombs and 99 bombs, and defaults to random between 15 to 25."
  },
  "TellMe": {
    "tellme": "Run a command."
  },
  "PayDay": {
    "freecredits": "More options to get free credits",
    "pdconfig": "Configure the `freecredits` options\n\nMore detailed docs: <https://cogs.yamikaitou.dev/payday.html#pdconfig>"
  },
  "Sendhook": {
    "sendhook": "Send a webhook\n\nwebhookUrl can be an alias",
    "edithook": "Edit a message sent by a webhook\n\nwebhookUrl can be an alias",
    "newhook": "Create a webhook",
    "sendhookself": "Send a webhook as yourself\n\nwebhookUrl can be an alias",
    "listhooks": "List the webhooks in a channel",
    "aliashook": "Configure aliases for webhooks in your server"
  },
  "BetterUptime": {
    "betteruptimeinfo": "No description available.",
    "uptime": "Get [botname]'s uptime percent over the last 30 days, and when I was last restarted.\n\nThe default value for `num_days` is `30`. You can put `0` days for all-time data.\nOtherwise, it needs to be `5` or more.\n\nNote: embeds must be enabled for this rich data to show\n\n**Examples:**\n- `[p]uptime`\n- `[p]uptime 0` (for all-time data)\n- `[p]uptime 7`",
    "uptimeexport": "Export my uptime data to CSV\n\nThe numbers represent uptime, so 86400 means 100% for that day (86400 seconds in 1 day).\n\nEverything is in UTC.\n\nConnected is the bot being connected to Discord.\n\nCog loaded is the cog being loaded but not necessarily connected to Discord.\n\nTherefore, connected should always be equal to or lower than cog loaded.",
    "uploop": "No description available.",
    "uptimegraph": "Check [botname] uptime with a graph over the last 30 days.\n\nThe default value for `num_days` is `30`. You can put `0` days for all-time data.\nOtherwise, it needs to be `5` or more.\n\n**Examples:**\n- `[p]uptime` - for the default of 30 days\n- `[p]uptime 0` - for all-time data\n-]uptime 7` - 7 days",
    "updev": "No description available.",
    "resetbu": "Reset the cog's data.",
    "downtime": "Check [botname] downtime over the last 30 days.\n\nThe default value for `num_days` is `30`. You can put `0` days for all-time data.\nOtherwise, it needs to be `5` or more.\n\n**Examples:**\n- `[p]uptime`\n- `[p]uptime 0` (for all-time data)\n- `[p]uptime 7`"
  },
  "FeatureRequest": {
    "frequest": "Base command for feature requests."
  },
  "DisboardReminder": {
    "bumpreminder": "Set a reminder to bump on Disboard.\n\nThis sends a reminder to bump in a specified channel 2 hours after someone successfully bumps, thus making it more accurate than a repeating schedule."
  },
  "Away": {
    "awaytextonly": "Toggle forcing the guild's away messages to be text only.\n\nThis overrides the embed_links check this cog uses for message sending.",
    "dnd": "Set an automatic reply when you're dnd.\n\n`delete_after` Optional seconds to delete the automatic reply. Must be minimum 5 seconds\n`message` The custom message to display when you're mentioned",
    "gaming": "Set an automatic reply when you're playing a specified game.\n\n`game` The game you would like automatic responses for\n`delete_after` Optional seconds to delete the automatic reply. Must be minimum 5 seconds\n`message` The custom message to display when you're mentioned\n\nUse \"double quotes\" around a game's name if it is more than one word.",
    "awaysettings": "View your current away settings",
    "listening": "Set an automatic reply when you're listening to Spotify.\n\n`delete_after` Optional seconds to delete the automatic reply. Must be minimum 5 seconds\n`message` The custom message to display when you're mentioned",
    "toggleaway": "Toggle away messages on the whole server or a specific guild member.\n\nMods, Admins and Bot Owner are immune to this.",
    "streaming": "Set an automatic reply when you're streaming.\n\n`delete_after` Optional seconds to delete the automatic reply. Must be minimum 5 seconds\n`message` The custom message to display when you're mentioned",
    "away": "Tell the bot you're away or back.\n\n`delete_after` Optional seconds to delete the automatic reply. Must be minimum 5 seconds\n`message` The custom message to display when you're mentioned",
    "offline": "Set an automatic reply when you're offline.\n\n`delete_after` Optional seconds to delete the automatic reply. Must be minimum 5 seconds\n`message` The custom message to display when you're mentioned",
    "idle": "Set an automatic reply when you're idle.\n\n`delete_after` Optional seconds to delete the automatic reply. Must be minimum 5 seconds\n`message` The custom message to display when you're mentioned"
  },
  "Monopoly": {
    "monopoly": "Play monopoly with 2-8 people.\n\nUse the optional parameter \"savefile\" to load a saved game.",
    "monopolyconvert": "Convert a savefile to work with the latest version of this cog.",
    "monopolystop": "Stop the game of monopoly in this channel.",
    "monopolyset": "Config options for monopoly."
  },
  "ReTrigger": {
    "retrigger": "Setup automatic triggers based on regular expressions\n\nSee https://regex101.com/ for help building a regex pattern.\nSee `[p]retrigger explain` or click the link below for more details.\n[For more details click here.](https://github.com/TrustyJAID/Trusty-cogs/blob/master/retrigger/README.md)"
  },
  "PyLavUtils": {
    "plutils": "Utility commands for PyLav"
  },
  "TrickOrTreat": {
    "eatcandy": "Eat some candy.\n\nValid types: candy/candie(s), chocolate(s), lollipop(s), cookie(s), star(s)\nExamples:\n    `[p]eatcandy 3 lollipops`\n    `[p]eatcandy star`\n\n🍬\nThe star of this competition. You should try to eat all of these, but don't get too sick.\n\n🍫\nReduces sickness by 10.\n\n🍭\nReduces sickness by 20.\n\n🥠\nSets sickness to a random amount - fortune favours the brave.\n\n⭐\nResets sickness to 0.",
    "totbalance": "[Admin] Check how many candies are 'on the ground' in the guild.",
    "buycandy": "Buy some candy. Prices could vary at any time.",
    "cinventory": "Check your inventory.",
    "totchannel": "Channel management for Trick or Treat.",
    "totclearall": "[Owner] Clear all saved game data.",
    "tottoggle": "Toggle trick or treating on the whole server.",
    "totversion": "Trick or Treat version.",
    "cboard": "Show the candy eating leaderboard.",
    "totcooldown": "Set the cooldown time for trick or treating on the server.",
    "stealcandy": "Steal some candy.",
    "pickup": "Pick up some candy, if there is any."
  },
  "Snipe": {
    "esnipe": "Bulk snipe edited messages.",
    "snipe": "Bulk snipe deleted messages.",
    "setsnipe": "Commands to configure Snipe."
  },
  "SimpleSanction": {
    "setsimplesanction": "Configure SimpleSanction for your server.",
    "sanction": "Sanction a member quickly and easily.\n\nAll arguments are optional and will be requested during the action if necessary. You must specify the parameters in this order.\n\nParameters:\n- `user`: Server member.                            Who is the user concerned?\n- `confirmation`: True or False.                Confirm the action directly. (Default is the recorded value)\n- `show_author`: True or False.                 Do you want the bot to show in its embeds who is the author of the command/sanction? (Default is the recorded value)\n- `finish_message`: True or False.              Do you want the bot to show an embed just before the action summarising the action and giving the sanctioned user and the reason? (Default is the recorded value)\n- `fake_action`: True or False.             Do you want the command to do everything as usual, but (unintentionally) forget to execute the action?\n- `duration`: Duration. (5d, 8h, 1m...) If you choose a TempBan, TempMute or TempMuteChanne, this value will be used for the duration of that action.\n- `reason`: Text.                                       The reason for this action. (`not` to not specify one, unless the reason has been made falcutative in the parameters)\n\nShort version: [p]sanction\nLong version:  [p]sanction 10 @member true true true true true true 3d Spam."
  },
  "Assistant": {
    "customfunctions": "Add custom function calls for Assistant to use\n\n**READ**\n- [Function Call Docs](https://platform.openai.com/docs/guides/gpt/function-calling)\n- [OpenAI Cookbook](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_call_functions_with_chat_models.ipynb)\n- [JSON Schema Reference](https://json-schema.org/understanding-json-schema/)\n\nThe following objects are passed by default as keyword arguments.\n- **user**: the user currently chatting with the bot (discord.Member)\n- **channel**: channel the user is chatting in (TextChannel|Thread|ForumChannel)\n- **guild**: current guild (discord.Guild)\n- **bot**: the bot object (Red)\n- **conf**: the config model for Assistant (GuildSettings)\n- All functions **MUST** include `*args, **kwargs` in the params and return a string\n```python\n# Can be either sync or async\nasync def func(*args, **kwargs) -> str:\n```\nOnly bot owner can manage this, guild owners can see descriptions but not code",
    "convoclear": "Reset your conversation with the bot\n\nThis will clear all message history between you and the bot for this channel",
    "embeddings": "Manage embeddings for training\n\nEmbeddings are used to optimize training of the assistant and minimize token usage.\n\nBy using this the bot can store vast amounts of contextual information without going over the token limit.\n\n**Note**\nYou can enter a search query with this command to bring up the menu and go directly to that embedding selection.",
    "convocopy": "Copy the conversation to another channel, thread, or forum",
    "chat": "Chat with [botname]!\n\nConversations are *Per* user *Per* channel, meaning a conversation you have in one channel will be kept in memory separately from another conversation in a separate channel\n\n**Optional Arguments**\n`--outputfile <filename>` - uploads a file with the reply instead (no spaces)\n`--extract` - extracts code blocks from the reply\n`--last` - resends the last message of the conversation\n\n**Example**\n`[p]chat write a python script that prints \"Hello World!\"`\n- Including `--outputfile hello.py` will output a file containing the whole response.\n- Including `--outputfile hello.py --extract` will output a file containing just the code blocks and send the rest as text.\n- Including `--extract` will send the code separately from the reply",
    "convostats": "Check the token and message count of yourself or another user's conversation for this channel\n\nConversations are *Per* user *Per* channel, meaning a conversation you have in one channel will be kept in memory separately from another conversation in a separate channel\n\nConversations are only stored in memory until the bot restarts or the cog reloads",
    "chathelp": "Get help using assistant",
    "assistant": "Setup the assistant\n\nYou will need an **[api key](https://platform.openai.com/account/api-keys)** from OpenAI to use ChatGPT and their other models.",
    "query": "Fetch related embeddings according to the current topn setting along with their scores\n\nYou can use this to fine-tune the minimum relatedness for your assistant",
    "convoshow": "View the current transcript of a conversation\n\nThis is mainly here for moderation purposes",
    "convoprompt": "Set a system prompt for this conversation!\n\nThis allows customization of assistant behavior on a per channel basis!\n\nCheck out [This Guide](https://platform.openai.com/docs/guides/prompt-engineering) for prompting help.",
    "convopop": "Pop the last message from your conversation"
  },
  "Lockdown": {
    "lockdown": "Enables lockdown for this server\n\nA profile ID must be specified. To list profiles,\ndo `[p]lockdownset listprofiles`",
    "lockdownset": "Settings for lockdown",
    "unlockdown": "Ends the lockdown for this server"
  },
  "COC": {
    "coc": "Show a preview of the Chain of Command.",
    "resetguild": "Reset the current guild's configuration.",
    "resetallguilds": "Reset all guilds' configurations.",
    "remrank": "No description available.",
    "addrank": "No description available."
  },
  "StaffApps": {
    "aepps": "Manage application types and questions.",
    "appsete": "Configure the application system.",
    "creaeteapplyembed": "Create an embed with a dropdown for users to start applications.",
    "appstatse": "View application statistics.",
    "appsearceh": "Search for applications by user or type."
  },
  "RepManager": {
    "rep": "Check a user's reputation in your server.\n\nIf no user is specified, the user who invoked the command will be used.",
    "repset": "Set the settings for the reputation system."
  },
  "Gmail": {
    "addemail": "Add an email account",
    "email": "Send an email\n\nAttach files to the command to send them as attachments",
    "deleteemail": "Delete an email account",
    "gmailhelp": "Get instructions for setting up Gmail",
    "gmailsettings": "View the email settings for the server",
    "gmailroles": "Set the roles allowed to send emails",
    "editemail": "Edit an email account"
  },
  "Werewolf": {
    "wwset": "Base command to adjust settings. Check help for command list.",
    "buildgame": "Create game codes to run custom games.\n\nPick the roles or randomized roles you want to include in a game.\n\nNote: The same role can be picked more than once.",
    "ww": "Base command for this cog. Check help for the commands list."
  },
  "OnConnect": {
    "connectset": "Settings for shard event logging."
  },
  "Staffer": {
    "staffer": "Staffer management system",
    "getdebugloopsstatus": "Get debug loops status for the Staffer cog.",
    "getlogs": "Get logs for the Staffer cog."
  },
  "Quarantine": {
    "setquar": "Change the configurations for [p]quar",
    "quar": "Quarantines a user (config in `[p]setquar`)",
    "quarall": "Search for all usernames (not nicknames) that match a string and quarantine them\n\nTypes:\n1 - Normal quarantine\n2 - Kick the users\n3 - Ban the users"
  },
  "PyLavPlayer": {
    "np": "Shows which track is currently being played on this server.",
    "queue": "Shows the current queue for this server.",
    "stop": "Stops the player and clears the queue.",
    "dc": "Request that I disconnect from the current voice channel.",
    "shuffle": "Shuffles the current queue.",
    "repeat": "Set whether to repeat the current song or queue.\n\nIf no argument is given, the current repeat mode will be toggled between the current track and off.",
    "pause": "Pause the player",
    "resume": "Resume the player",
    "prev": "Play previously played tracks.\n\nA history of the last 100 tracks played is kept.",
    "volume": "Set the current volume for the player.\n\nThe volume is a percentage value between 0% and 1,000%, where 100% is the default volume.",
    "seek": "Seek the current track.\n\nSeek can either be a number of seconds, a timestamp, or a specific percentage of the track.\n\nExamples:\n`[p]seek 10` Seeks 10 seconds forward\n`[p]seek -20` Seeks 20 seconds backwards\n`[p]seek 0:30` Seeks to 0:30\n`[p]seek 50%` Seeks to 50% of the track",
    "connect": "Request that I connect to the specified channel or your current channel.",
    "playerset": "Player settings commands",
    "__PyLavPlayer_volume_change_by": "No description available.",
    "bump": "Plays the specified track from the queue.\n\nIf you specify the `after_current` argument, the track will be played after the current track; otherwise, it will replace the current track.",
    "play": "Attempt to play the queries which you provide.\n\nSeparate multiple queries with a new line (`shift + enter`).\n\nIf you want to play a local track, you can specify the full path relative to the local tracks' folder.\nFor example, if my local tracks folder is: `/home/draper/music`.\n\nI can play a single track with `track.mp3` or `/home/draper/music/track.mp3`.\nI can play everything inside a folder with a `sub-folder/folder`.\nI can play everything inside a folder and its sub-folders with the `all:` prefix, i.e. `all:sub-folder/folder`.\n\nYou can search specific services by using the following prefixes*:\n`dzsearch:`  - Deezer\n`spsearch:`  - Spotify\n`amsearch:`  - Apple Music\n`ytmsearch:` - YouTube Music\n`ytsearch:`  - YouTube\n`scsearch:`  - SoundCloud\n`ymsearch:`  - Yandex Music\n\nYou can trigger text-to-speech by using the following prefixes*:\n`speak:` - I will speak the query (limited to 200 characters)\n`tts://` - I will speak the query",
    "playnext": "Enqueue a track at the top of the queue.",
    "remove": "Remove the specified track from the queue.\n\nIf you specify the `remove_duplicates` argument, all tracks that are the same as your URL or the index track will be removed.",
    "skip": "Skips the current track."
  },
  "Permissions": {
    "acl": "Manage permissions with YAML files.",
    "permissions": "Command permission management tools."
  },
  "EventLogger": {
    "setlog": "Set the logging channel for a specific event",
    "seteventlogger": "Configure EventLogger for your server."
  },
  "Emotes": {
    "setemotes": "Change the configurations for Emotes Cog\n\nSetting global values to `False` will override guild settings and disable it across the whole bot.",
    "emotesearch": "Search for image-ized emote url",
    "emotesend": "Send an emote from Emote Sheet, with first search result",
    "emoteinfo": "Send info about an emote\n\nIf you don't have access to the emote (ie. no Nitro, or can't send the emote because it's from another server), you can reply to the message with the emote you want and the `[p]emoteinfo` command will pick up the emote.",
    "emotelist": "List all emotes in message\n\nShows a list of names and urls for all emotes in a message, when you reply to a message with this command. Useful for Emote Spreadsheet.",
    "showemote": "Show an emote you have an URL for"
  },
  "EventPoster": {
    "event": "All event related commands."
  },
  "BrainfuckCog": {
    "unbrainfuck": "Interprets Brainfuck code and converts it to normal text.        ",
    "brainfuck": "Compiles normal text into Brainfuck code.        "
  },
  "EmbedUtils": {
    "embed": "Post a simple embed with a color, a title and a description.\n\nPut the title in quotes if it contains spaces.\nIf you provide a message, it will be edited."
  },
  "PrivateWormHole": {
    "privatewormhole": "Manage private wormhole connections."
  },
  "CardsAgainstHumanity": {
    "cah": "Cards Against Humanity®️ commands\n\nCards Against Humanity®️ is licened under Creative Commons BY-NC-SA 4.0\nhttps://creativecommons.org/licenses/by-nc-sa/4.0/"
  },
  "Events": {
    "enotify": "Enable/Disable event notifications for yourself\n\nYou will be notified when events start and end",
    "events": "Create, manage and view events",
    "enter": "Enter an event if one exists"
  },
  "RYD": {
    "ryd": "Insert YouTube video url or id as argument to get dislikes count",
    "ryd-config": "Change settings of RYD Cog"
  },
  "JoinPing": {
    "jpset": "Adjust the settings for the cog."
  },
  "HitOrMiss": {
    "throw": "Throw an item you own at a user\n\n`item` is the name of the item you want to throw\n`target` is the user you want to throw the item at",
    "hitormiss": "Hit or Miss",
    "heal": "Heal yourself.\n\nUse a medkit if you own one, to increase your hp from anywhere near 1 to 40."
  },
  "RoleRequests": {
    "reqset": "Adjust [p]request command settings.",
    "request": "Requests access to a role."
  },
  "ServerStats": {
    "pruneroles": "Perform various actions on users who haven't spoken in x days\n\nNote: This will only check if a user has talked in the past x days whereas\ndiscords built in Prune checks online status",
    "setguildjoin": "Set a channel to see new servers the bot is joining",
    "removeguildjoin": "Stop bots join/leave server messages",
    "checkcheater": "Checks for possible cheaters abusing the global bank and server powers",
    "whois": "Display servers a user shares with the bot\n\n- `<user_id>` The user you want to search for, ID's are preferred but some name lookup works.\n - Note: This will only show shared servers between you and the bot.",
    "topservers": "Lists servers by number of users and shows number of users",
    "guildedit": "Edit various guild settings",
    "newservers": "Lists servers by when the bot was added to the server",
    "emoji": "Post a large size emojis in chat",
    "avatar": "Display a users avatar in chat",
    "topmembers": "Lists top members on the server by join date\n\n- `[include_bots]` whether or not to display bots or members. By default this will show everyone.\n- `[guild]` can be either the server ID or name.\n - Note: You must share the guild with the bot for this to work.",
    "getguilds": "Display info about multiple servers\n\n- `[guilds]` can be multiple either the guild ID or name.\n - Note: You must share the guild with the bot for this to work.",
    "channeledit": "Modify channel options",
    "listchannels": "Lists channels and their position and ID for a server\n\n- `[guild]` can be either the guild ID or name.\n - Note: You must share the guild with the bot for this to work.",
    "botstats": "Display stats about the bot",
    "getguild": "Display info about servers the bot is on\n\n- `[guild]` can be either the guild ID or name.\n - Note: You must share the guild with the bot for this to work.",
    "nummembers": "Display number of users on a server\n\n- `[guild]` can be either the guild ID or name.\n - Note: You must share the guild with the bot for this to work.",
    "getroles": "Displays all roles their ID and number of members in order of\nhierarchy\n\n- `[guild]` can be either the guild ID or name.\n - Note: You must share the guild with the bot for this to work.",
    "getreactions": "Gets a list of all reactions from specified message and displays the user ID,\nUsername, and Discriminator and the emoji name.",
    "serverstats": "Gets total messages on the server and displays each channel\nseparately as well as the user who has posted the most in each channel\n\nNote: This is a very slow function and may take some time to complete",
    "channelstats": "Gets total messages in a specific channel as well as the user who\nhas posted the most in that channel\n\n`limit` must be a number of messages to check, defaults to all messages\nNote: This can be a very slow function and may take some time to complete",
    "guildemojis": "Display all server emojis in a menu that can be scrolled through\n\n`id_emojis` return the id of emojis. Default to False, set True\n if you want to see emojis ID's.\n- `[guild]` can be either the guild ID or name.\n - Note: You must share the guild with the bot for this to work."
  },
  "TicketTool": {
    "settickettool": "Configure TicketTool for your server.",
    "ticket": "Commands for using the Tickets system.\n\nMany commands to manage tickets appear when you run help in a ticket channel."
  },
  "Chatchart": {
    "ccdeny": "Add a channel to deny chatchart use.",
    "chatchart": "Generates a pie chart, representing the last 5000 messages in the specified channel.",
    "serverchart": "Generates a pie chart, representing the last 1000 messages from every allowed channel in the server.\n\nAs example:\nFor each channel that the bot is allowed to scan. It will take the last 1000 messages from each channel.\nAnd proceed to build a chart out of that.",
    "ccallow": "Remove a channel from the deny list to allow chatchart use.",
    "cclimit": "Limit the amount of messages someone can request.\n\nUse `0` for no limit.",
    "ccdenylist": "List the channels that are denied."
  },
  "Race": {
    "race": "Race related commands.",
    "setrace": "Race settings commands."
  },
  "RoleUtils": {
    "autorole": "Manage autoroles and sticky roles.",
    "role": "Base command for modifying roles.\n\nInvoking this command will add or remove the given role from the member, depending on whether they already had it.",
    "multirole": "Add multiple roles to a member.",
    "reactrole": "Base command for Reaction Role management."
  },
  "LevelUp": {
    "levelset": "Configure LevelUp Settings",
    "mocklvl": "Test LevelUp Image Generation",
    "leveldata": "Admin Only Data Commands",
    "weekly": "View Weekly Leaderboard",
    "lastweekly": "View Last Week's Leaderboard",
    "weeklyset": "Configure Weekly LevelUp Settings",
    "stars": "Reward a good noodle",
    "leveltop": "View the LevelUp leaderboard",
    "startop": "View the Star Leaderboard",
    "starset": "Configure LevelUp Star Settings",
    "roletop": "View the leaderboard for roles",
    "prestige": "Prestige your rank!\nOnce you have reached this servers prestige level requirement, you can\nreset your level and experience to gain a prestige level and any perks associated with it\n\nIf you are over level and xp when you prestige, your xp and levels will carry over",
    "profile": "View User Profile",
    "setprofile": "Customize your profile",
    "levelowner": "Owner Only LevelUp Settings"
  },
  "Badges": {
    "listbadges": "List the available badges that can be created",
    "badges": "Creates a fun fake badge based on your discord profile\n\n`badge` is the name of the badges\ndo `[p]listbadges` to see available badges",
    "gbadges": "Creates a fun fake gif badge based on your discord profile\nthis only works if you have a gif avatar\n\n`badge` is the name of the badges\ndo `[p]listbadges` to see available badges"
  },
  "Jail": {
    "setjail": "Set the jail channel.",
    "setrole": "Set the jail role.",
    "jail": "Jail a user for a specified time.",
    "free": "Free a jailed user immediately."
  },
  "ReactToCommand": {
    "reacttocommand": "Group of commands to use ReactToCommand."
  },
  "Dmreply": {
    "dmreply": "Sends a DM to a user.\n\nRequires a User ID, or it won't work.",
    "setdmreply": "Change the configurations in dmreply (Owner only)\n\nEmbed color is determined by your bot's settings under [p]set.\nAutomatic reply embed color cannot be changed."
  },
  "Warnings": {
    "warningset": "Manage settings for Warnings.",
    "warnreason": "Manage warning reasons.\n\nReasons must be given a name, description and points value. The\nname of the reason must be given when a user is warned.",
    "actionlist": "List all configured automated actions for Warnings.",
    "mywarnings": "List warnings for yourself.",
    "warnings": "List the warnings for the specified user.",
    "unwarn": "Remove a warning from a user.",
    "warn": "Warn the user for the specified reason.\n\n`<points>` number of points the warning should be for. If no number is supplied\n1 point will be given. Pre-set warnings disregard this.\n`<reason>` is reason for the warning. This can be a registered reason,\nor a custom reason if ``[p]warningset allowcustomreasons`` is set.",
    "reasonlist": "List all configured reasons for Warnings.",
    "warnaction": "Manage automated actions for Warnings.\n\nActions are essentially command macros. Any command can be run\nwhen the action is initially triggered, and/or when the action\nis lifted.\nActions must be given a name and a points threshold. When a\nuser is warned enough so that their points go over this\nthreshold, the action will be executed."
  },
  "BankEvents": {
    "bankevents": "Get help using the BankEvents cog",
    "payday_override": "No description available."
  },
  "GetDocs": {
    "rtfm": "Show all items matching your search.\n\nArguments:\n- `source`: The name of the documentation to use. Defaults to the one configured with `[p]setgetdocs defaultsource`.\n- `limit`: The limit of objects to be sent.\n- `with_std`: Also display links to non-API documentation.\n- `query`: Your search. (`events` to get all dpy events, for `discord.py`, `redbot` and `pylav` source only)",
    "docs": "View rich documentation for a specific node/query.\n\nThe name must be exact, or else rtfm is invoked instead.\n\nArguments:\n- `source`: The name of the documentation to use. Defaults to the one configured with `[p]setgetdocs defaultsource`.\n- `query`: The documentation node/query. (`random` to get a random documentation)",
    "listsources": "Shows a list of all sources, those that are available or those that are disabled.",
    "setgetdocs": "Commands to configure GetDocs."
  },
  "McWhitelister": {
    "whitelister": "MCWhitelister commands",
    "mccommand": "Run a command on the Minecraft server.\n\n**NO VALIDATION is performed on your inputs.**"
  },
  "EconomyTrack": {
    "bankgraph": "View bank status over a period of time.\n**Arguments**\n`<timespan>` How long to look for, or `all` for all-time data. Defaults to 1 day.\nMust be at least 1 hour.\n**Examples:**\n    - `[p]bankgraph 3w2d`\n    - `[p]bankgraph 5d`\n    - `[p]bankgraph all`",
    "economytrack": "Configure EconomyTrack",
    "membergraph": "View member count over a period of time.\n**Arguments**\n`<timespan>` How long to look for, or `all` for all-time data. Defaults to 1 day.\nMust be at least 1 hour.\n**Examples:**\n    - `[p]membergraph 3w2d`\n    - `[p]membergraph 5d`\n    - `[p]membergraph all`",
    "remoutliers": "Cleanup data above a certain total economy balance\n\n**Arguments**\ndatatype: either `bank` or `member`"
  },
  "GuildID": {
    "istats": "Returns server stats from an invite link",
    "serverinvites": "Get a list of server invites"
  },
  "InstantCommands": {
    "instantcmd": "Instant Commands cog management",
    "instantcmdinfo": "Get informations about the cog."
  },
  "Tags": {
    "tagsettings": "Manage Tags cog settings.",
    "migratealias": "Migrate the Alias cog's global and server aliases into tags.\n\nThis converts all aliases created with the Alias cog into tags with command blocks.\nThis action cannot be undone.\n\n**Example:**\n`[p]migratealias`",
    "migratecustomcom": "Migrate the CustomCommand cog's server commands into tags.\n\nThis converts all custom commands created into tags with the command text as TagScript.\nRandomized commands are converted into random blocks.\nCommands with converters are converted into indexed args blocks.\nThis action cannot be undone.\n\n**Example:**\n`[p]migratecustomcom`",
    "invoketag": "Manually invoke a tag with its name and arguments.\n\nRestricting this command with permissions in servers will restrict all members from invoking tags.\n\n**Examples:**\n`[p]invoketag searchitem trophy`\n`[p]invoketag donate`",
    "tags": "View all tags and aliases.\n\nThis command will show global tags if run in DMs.\n\n**Example:**\n`[p]tags`",
    "tag": "Tag management with TagScript.\n\nThese commands use TagScriptEngine.\nRead the [TagScript documentation](https://seina-cogs.readthedocs.io/en/latest/) to learn how to use TagScript blocks."
  },
  "Raffle": {
    "raffle": "Raffle group command",
    "setraffle": "Set Raffle group command"
  },
  "NoNuke": {
    "nonuke": "Anti-Nuke System for lazy guild owners!\n\nMonitors the following events:\nKicks & Bans\nChannel Creation/Edit/Deletion\nRole Creation/Edit/Deletion\n\nSet a cooldown(in seconds)\nSet an overload count(X events in X seconds)\nSet an action(kick, ban, strip, notify)\n\nIf a user or bot exceeds X mod events within X seconds, the set action will be performed"
  },
  "TimeStamps": {
    "timestamp": "Produce a Discord timestamp.\n\nTimestamps are a feature added to Discord in the summer of 2021,\nwhich allows you to send timestamps will which update accordingly\nwith any user's date time settings.\n\n**Example Usage**\n\n- `[p]timestamp 1st of october, 2021`\n- `[p]timestamp 20 hours ago`\n- `[p]timestamp in 50 minutes`\n- `[p]timestamp 01/10/2021`\n- `[p]timestamp now`"
  },
  "EmbedCreator": {
    "embedcreate": "Create an embed.\n\nThe command will send an interactive menu to construct an embed, unless otherwise specified by the **builder** option described further below.\n\nThe following options are supported:\n- **title** - Embed title.\n- **description** - Embed description.\n- **colour/color** - A valid colour or hex code.\n- **url** - A valid URL for the embed's title hyperlink.\n- **image** - A valid URL for the embed's image.\n- **thumbnail** - A valid URL for the embed's thumbnail.\n- **author_name** - The name of the embed's author.\n- **author_url** - A valid URL for the author's hyperlink. \n- **author_icon_url** - A valid URL for the author's icon image.\n- **footer_name** - Text for the footer.\n- **footer_icon_url** - A valid URL for the footer's icon image.\n- **builder** - Whether this help menu appears along with the constructor buttons. Defaults to true.\n- **source** - An existing message to use its embed. Can be a link or message ID.\n- **content** - The text sent outside of the message."
  },
  "RoleSync": {
    "rolesync": "Sync role states between guilds"
  },
  "Google": {
    "google": "Google search your query from Discord channel.",
    "yandex": "Yandex related search commands"
  },
  "AnonReporter": {
    "anonreporter": "Anonreporter settings",
    "botreport": "Report something to the bot owner anonymously.",
    "anonreport": "Report something anonymously (don't include text to report via DM)"
  },
  "Adwarn": {
    "adwarn": "Warn a user and send an embed to the default warning channel.",
    "removewarn": "Remove a specific warning from a user by its UUID.",
    "clearwarns": "Clear all warnings for a user.",
    "warncount": "Get the total number of warnings a user has.",
    "unadwarn": "Clear the most recent warning for a user.",
    "modwarns": "Show the number of warnings issued by a moderator and who they have warned in the current server.",
    "editaw": "Edit a specific warning by its UUID.",
    "topwarners": "Show the top 5 users who have issued the most warnings in the current server.",
    "adboard": "Show all users who have issued warnings and how many they have issued.",
    "warnset": "Settings for the warning system.",
    "adwarninfo": "No description available.",
    "adrace": "Start an adwarn race that lasts for a configurable amount of time."
  },
  "ListPermissions": {
    "listpermissions": "Generates the permissions of a certain object and puts them in a nice table for you.",
    "deniedpermissions": "Generates the permissions of a certain object and puts them in a nice table for you.  Only shows the denied permissions.",
    "availablepermissions": "Generates the permissions of a certain object and puts them in a nice table for you.  Only shows the available permissions."
  },
  "RolePlay": {
    "roleplay": "Role play configuration.\n\nThis is a group command, so you can use it to configure the roleplay for a channel.\n\nGet started with `[p]roleplay channel`.",
    "roleplayinfo": "No description available."
  },
  "NickPrefix": {
    "turkey": "Adds a Thanksgiving themed prefix to the user's nickname\nUsage: [p]turkey",
    "boo": "Adds a Halloween themed prefix to the user's nickname\nUsage: [p]boo"
  },
  "Trivia": {
    "trivia": "Start trivia session on the specified category.\n\nYou may list multiple categories, in which case the trivia will involve\nquestions from all of them.",
    "triviaset": "Manage Trivia settings."
  },
  "Chairs": {
    "chairs": "Play the game of Chairs!"
  },
  "News": {
    "newssetup": "Instructions on how to setup news related APIs.",
    "news": "Group Command for News."
  },
  "AutoDocs": {
    "makedocs": "Create a Markdown docs page for a cog and send to discord\n\n**Arguments**\n`cog_name:            `(str) The name of the cog you want to make docs for (Case Sensitive)\n`replace_prefix:      `(bool) If True, replaces the `prefix` placeholder with the bots prefix\n`replace_botname:     `(bool) If True, replaces the `botname` placeholder with the bots name\n`extended_info:       `(bool) If True, include extra info like converters and their docstrings\n`include_hidden:      `(bool) If True, includes hidden commands\n`include_help:        `(bool) If True, includes the cog help text at the top of the docs\n`max_privilege_level: `(str) Hide commands above specified privilege level\n`min_privilage_level: `(str) Hide commands below specified privilege level\n- (user, mod, admin, guildowner, botowner)\n`csv_export:          `(bool) Include a csv with each command isolated per row for use as embeddings\n\n**Note** If `all` is specified for cog_name, all currently loaded non-core cogs will have docs generated for\nthem and sent in a zip file"
  },
  "CogManagerUI": {
    "reorderpath": "Reorders paths internally to allow discovery of different cogs.",
    "paths": "Lists current cog paths in order of priority.",
    "cogs": "Lists all loaded and available cogs.",
    "addpath": "Add a path to the list of available cog paths.",
    "removepath": "Removes one or more paths from the available cog paths given the `path_numbers` from `[p]paths`.",
    "installpath": "Returns the current install path or sets it if one is provided.\n\nThe provided path must be absolute or relative to the bot's\ndirectory and it must already exist.\n\nNo installed cogs will be transferred in the process."
  },
  "BotListsPost": {
    "botlist": "Bot list posting setup",
    "botlistpost": "Setup for botlistposting"
  },
  "Gulag": {
    "gulagset": "Commands for gulag management.",
    "gulag": "Sends a member to the gulag.\n\n> This will take away all roles of a member and give them the gulag role.",
    "bail": "Releases a member from the gulag.\n\n> This will take away gulag role and give back the roles the member previously had."
  },
  "GistsHandler": {
    "gist": "Create a new Gist and edit an existing one.\n\nYou need to set up a GitHub token with `[p]set api github token,[TOKEN]` first."
  },
  "Paginator": {
    "paginator": "Commands to manage paginators.\n\nJSON example:\n    https://pastebin.com/DiuFREBW\n\nYAML example:\n    https://pastebin.com/e9ZvhYUn"
  },
  "Clara": {
    "botguilds": "See info about the servers your bot is in.\n\nLists total guilds, total approximate member count, and top large servers using your bot.\n\nThe command may take a while to run."
  },
  "Info": {
    "infoset": "Settings configuration.",
    "commandinfo": "View detailed information about a command.",
    "userinfo": "Check user's info, defaults to author."
  },
  "GlobalBanList": {
    "globalbanlistowner": "Group command for Global Ban List owner settings.",
    "globalbanlist": "Manage the global ban list."
  },
  "AutoTraceback": {
    "traceback": "Sends to the owner the last command exception that has occurred.\n\nIf public (yes is specified), it will be sent to the chat instead.\n\nWarning: Sending the traceback publicly can accidentally reveal sensitive information about your computer or configuration.\n\n**Examples:**\n    - `[p]traceback` - Sends the traceback to your DMs.\n    - `[p]traceback True` - Sends the last traceback in the current context.\n\n**Arguments:**\n    - `[public]` - Whether to send the traceback to the current context. Default is `True`.\n    - `[index]`  - The error index. `0` is the last one."
  },
  "MemberCount": {
    "membercount": "Get count of all members + humans and bots separately."
  },
  "Maintenance": {
    "maintenance": "Control the bot's maintenance."
  },
  "Uncategorized": {
    "help": "I need somebody\n(Help) not just anybody\n(Help) you know I need someone\n(Help!)",
    "plcredits": "Shows the credits and translation details for the PyLav cogs and shared code",
    "plversion": "Show the version of PyLav library"
  },
  "CategoryHelp": {
    "categoryhelp": "Get help for category."
  },
  "Pokecord": {
    "select": "Select your default pokémon.",
    "pokedex": "Check your caught pokémon!",
    "starter": "Choose your starter pokémon!",
    "psearch": "Search your pokemon.\n\nArguements must have `--` before them.\n    `--name` | `--n` - Search pokemon by name.\n    `--level`| `--l` - Search pokemon by level.\n    `--id`   | `--i` - Search pokemon by ID.\n    `--variant`   | `--v` - Search pokemon by variant.\n    `--type`   | `--t` - Search pokemon by type.\n    `--gender` | `--g` - Search by gender.\n    `--iv` | - Search by total IV.",
    "current": "Show your current selected pokemon",
    "hint": "Get a hint on the pokémon!",
    "catch": "Catch a pokemon!",
    "pokesim": "Sim pokemon spawning - This is blocking.",
    "poke": "Pokecord commands",
    "list": "List a trainers or your own pokémon!"
  },
  "SmartReact": {
    "react": "Smart Reacts, modified."
  },
  "Calculator": {
    "calculate": "Calculate a simple expression.",
    "setcalculator": "Commands to configure Calculator."
  },
  "SMC": {
    "sm": "Commands for managing the single message channel."
  },
  "Spamatron": {
    "stopghostping": "Stop the ghostping task.",
    "spam": "Spam a message in a channel a specified number of times.",
    "ghostping": "Ghostping a member in a specified channel."
  },
  "FastClickGame": {
    "fastclickgame": "Play to click on the right button as fast as you can!",
    "setfastclickgame": "Group of commands to set FastClickGame."
  },
  "ReactKarma": {
    "upvote": "See this server's upvote emoji.",
    "karmaboard": "Prints out the karma leaderboard.\n\nDefaults to top 10. Use negative numbers to reverse the leaderboard.",
    "setupvote": "Set the upvote emoji in this server.\n\nOnly the first reaction from the command author will be added.",
    "resetkarma": "Resets a user's karma.",
    "karma": "Check a user's karma.\n\nLeave [user] blank to see your own karma.",
    "setdownvote": "Add a downvote emoji by reacting to the bot's response.\n\nOnly the first reaction from the command author will be added.",
    "downvote": "See this server's downvote emoji."
  },
  "PfpImgen": {
    "slur": "TIME TO GO CALL SOMEONE A SLUR ON DISCORD!...",
    "bau": "You become a bau bau...",
    "cloudflare": "Cloudflare someone!...",
    "ineko": "Make a neko avatar...",
    "you": "Make a you avatar...",
    "mhr": "My honest reaction...",
    "fraud": "He's a fraud...",
    "denwa": "Point at...",
    "fumopic": "Remilia caughts you in 4K...",
    "rika": "Point at...",
    "gosling": "Totally not gosling at all...",
    "idiot": "You're a fucking idiot...",
    "ireally": "I really shouln't...",
    "marisa": "Selfie with Marisa...",
    "religion": "We could make a religion out off this!...",
    "amigo": "Amigo at...",
    "nep": "Rom & Ram spooked at you...",
    "secreto": "El Secreto de la creatividad",
    "better": "Play better games...",
    "thisuser": "This user makes me happy",
    "lies": "Don't believe his lies...",
    "competition": "When you're at a competition",
    "ahri": "Look at this shit...",
    "sus": "You're among us...",
    "pippa": "Pippa stares at you...",
    "sugoi": "You become serval...",
    "cage": "to the cage...",
    "ina": "Ina is totally disgusted at you...",
    "jack": "Jack Sparrow's tresaure...",
    "nofun": "No fun allowed!...",
    "ash": "You become ash...",
    "doctor": "The Doctor is IN...",
    "pretend": "You become Essex...",
    "conference": "Well well, what do you have to say?...",
    "evidence": "Here's the photographic evidence...",
    "bonk": "Bonk! Go to horny jail.",
    "taiko": "Taiko...",
    "simp": "You are now a simp.",
    "bill": "You become a billboard...",
    "banner": "To war we go!",
    "clowno": "You become a clown...",
    "elite": "Elite Miko!...",
    "nickel": "If I had a nickel for everytime someone ran this command..\n\nI'd probably have a lot.",
    "stoptalking": "Tell someone to stop blabbering away",
    "mygf": "My girlfriend...",
    "huaso": "Tikitikiti...",
    "horny": "Assign someone a horny license.",
    "honestly": "Quite incredible...",
    "shutup": "Will you shutup, man",
    "dj": "Make a DJ...",
    "ahoy": "You and Marine <3...",
    "waku": "Certified WakuWaku moment...",
    "sanic": "Sonic Celebrates...",
    "thrilled": "Thrilled...",
    "kowone": "Korone......",
    "funado": "Estoy funado...",
    "dreams": "Has soñado...",
    "marihat": "Marisa Hat...",
    "thisnow": "We can end this now...",
    "reliable": "Call the ol' reliable...",
    "didyou": "Did you know...",
    "itis": "You are running out...",
    "thejar": "To the jar!...",
    "ipunch": "Punch somebody!..."
  },
  "PartyCrash": {
    "partycrash": "Lists servers and existing invites for them."
  },
  "Ticks": {
    "ticks": "Base command for managing or using tags."
  },
  "SCP": {
    "unexplainedlocations": "Look through the log of unexplained locations.",
    "scpj": "Look up SCP-Js.\n\nReminder: Enter the correct name or else the resultant page will be invalid.\nUse 001, etc. in case of numbers less than 100.",
    "scparc": "Look up SCP archives.\n\nWarning: Some of them may be too creepy or gruesome.",
    "extranormalevents": "Look through the log of extranormal events.",
    "anomalousitems": "Look through the log of anomalous items.",
    "scp": "Look up SCP articles.\n\nWarning: Some of them may be too creepy or gruesome.\nReminder: You must specify a number between 1 and 5999.",
    "scpex": "Look up explained SCP articles.\n\nWarning: Some of them may be too creepy or gruesome."
  },
  "Doujin": {
    "doujin": "Doujin commands"
  },
  "Skyrim": {
    "nazeem": "Do you get to the Cloud District very often?\n\nOh, what am I saying, of course you don't.",
    "guard": "Says a random guard line from Skyrim."
  },
  "CogUpdater": {
    "undoupdates": "Undo the updates made to specified cogs or all cogs if none specified.",
    "updatecogs": "Update specified cogs or all cogs if none specified.",
    "setpath": "Set the path to the cog data directory."
  },
  "AltDentifier": {
    "altcheck": "Check a user on AltDentifier.",
    "altset": "Manage AltDentifier Settings."
  },
  "ServerAssistant": {
    "serverassistant": "Base command for the ServerAssistant cog."
  },
  "RedUpdate": {
    "updatered": "update [botname] to latest changes.\n\nit will update to latest stable changes by default unless you specify `dev` as version.\n\nArguments:\n- `[version]`: `dev` to update to latest dev changes. `stable` by default already.",
    "redupdateset": "Setting commands for redupdate cog.",
    "forkupdate": "Update [botname] to your fork.\n\nThis will update to your fork and not to red's main repo. Make sure you have set the url using `redset url` before using this command.\n\nNote: If you do not have a fork, you can use `updatered` to update to latest stable changes."
  },
  "Battleship": {
    "battleshipset": "Config options for battleship.",
    "battleship": "Start a game of battleship.",
    "battleshipboard": "View your current board from an ongoing game in your DMs.\n\nSpecify the channel ID of the channel the game is in.",
    "battleshipstop": "Stop the game of battleship in this channel."
  },
  "Admin": {
    "announce": "Announce a message to all servers the bot is in.",
    "selfrole": "Add or remove a selfrole from yourself.\n\nServer admins must have configured the role as user settable.\nNOTE: The role is case sensitive!",
    "announceset": "Change how announcements are sent in this guild.",
    "selfroleset": "Manage selfroles.",
    "removerole": "Remove a role from a user.\n\nUse double quotes if the role contains spaces.\nIf user is left blank it defaults to the author of the command.",
    "serverlock": "Lock a bot to its current servers only.",
    "addrole": "Add a role to a user.\n\nUse double quotes if the role contains spaces.\nIf user is left blank it defaults to the author of the command."
  },
  "Bingo": {
    "bingo": "Generate a Bingo Card\n\n`stamp` - Select the tile that you would like to stamp. If not\nprovided will just show your current bingo card.",
    "bingoset": "Commands for setting bingo settings"
  },
  "Pupper": {
    "pets": "Manage your pet."
  },
  "Defender": {
    "dset": "Defender system settings",
    "alert": "Alert the staff members",
    "voteout": "Initiates a vote to expel a user from the server\n\nCan be used by members with helper roles during emergency mode",
    "vaporize": "Gets rid of bad actors in a quick and silent way\n\nWorks only on Rank 3 and under",
    "defender": "Defender commands reserved to staff",
    "silence": "Enables server wide message autodeletion for the specified rank (and below)\n\nPassing 0 will disable this."
  },
  "PassGen": {
    "passgen": "Generates a random password of the specified length"
  },
  "Dashboard": {
    "dashboard": "Get the link to the Dashboard.",
    "setdashboard": "Configure Dashboard."
  },
  "GuessFlag": {
    "guessflagset": "Settings for Guess the Flag game.",
    "guessflag": "Play A game of Guess the flag of a country.\n\nYou can only play this game once every 60 seconds.\n\nYou have 30 seconds to guess the flag of a country.\nYou will win credits if you guess the flag correctly and lose credits if you guess it wrong.\n\nThe default credit win amount is 100 and the default credit loss amount is 50 credits but can be changed by the bot owner."
  },
  "Counting": {
    "countingset": "Counting settings commands.",
    "counting": "Counting commands"
  },
  "EmojSplosion": {
    "emojsplosion": "No description available."
  },
  "ExtendedModLog": {
    "modlog": "Toggle various extended modlog notifications\n\nRequires the channel to be setup with `[p]modlogset modlog #channel`\nOr can be sent to separate channels with `[p]modlog channel #channel event_name`"
  },
  "Editor": {
    "editmessage": "Edits a message with the content of another message or the specified content.\n\nArguments:\n    - ecid: The ID of the channel of the message you are editing (Required)\n\n    - editid: The ID of the message you are editing (Required)\n\n    - ccid: The ID of the channel of the message you are copying from.  If you are giving the raw content yourself, pass 0 as the channel ID. (Optional)\n\n    - content: The ID of the message that contains the contents of what you want the other message to become, or the new content of the message.  (Required, integer (for message id) or text (for new content)\n\nExamples:\n`[p]editmessage <edit_channel_id> <edit_message_id> <copy_channel_id> <copy_message_id>`\n`[p]editmessage <edit_channel_id> <edit_message_id> 0 New content here`\n\nReal Examples:\n`[p]editmessage 133251234164375552 578969593708806144 133251234164375552 578968157520134161`\n`[p]editmessage 133251234164375552 578969593708806144 0 ah bruh`"
  },
  "Snake": {
    "snake": "No description available."
  },
  "Vouches": {
    "setvouchchannel": "No description available.",
    "setvouchroles": "No description available.",
    "removevouch": "No description available.",
    "vouchleaderboard": "No description available.",
    "vouches": "No description available.",
    "addvouch": "No description available."
  },
  "PokemonDuel": {
    "pokemonduelset": "Config options for pokemon duels.",
    "pokemonduel": "Battle in a Pokemon Duel with another member of your server."
  },
  "Streams": {
    "twitchstream": "Check if a Twitch channel is live.",
    "streamalert": "Manage automated stream alerts.",
    "youtubestream": "Check if a YouTube channel is live.",
    "streamset": "Manage stream alert settings.",
    "picarto": "Check if a Picarto channel is live."
  },
  "Ratings": {
    "iqrate": "100% legit IQ test.",
    "sanitycheck": "Check your sanity.",
    "clownrate": "Reveal someone's clownery.",
    "simprate": "Find out how much someone is simping for something."
  },
  "Holidays": {
    "holiday": "Group command for interacting with holidays.",
    "holidayset": "Configure holiday-related settings"
  },
  "Minifier": {
    "minify": "Minify a python file.\n\nYou need to attach a file to this command, and it's extension needs to be `.py`."
  },
  "StealEmoji": {
    "stealemoji": "Base command for this cog. Check help for the commands list."
  },
  "Encoding": {
    "decode": "Decode a string.",
    "encode": "Encode a string.",
    "hash": "Various hashing commands"
  },
  "RTFS": {
    "rtfs": "Read the source code for a cog or command.\n\nThe bot owner may additionally supply any valid Python object,\nif developer mode is enabled."
  },
  "Jishaku": {
    "jishaku": "The Jishaku debug and diagnostic commands.\n\nThis command on its own gives a status brief.\nAll other functionality is within its subcommands."
  },
  "KirA": {
    "kira": "Remind people to only post relevant links."
  },
  "ClearChannel": {
    "setclearchannel": "Configure ClearChannel for your server.",
    "clearchannel": "Delete ALL messages from the current channel by duplicating it and then deleting it.\n\nFor security reasons, only the server owner and the bot owner can use the command. Use the \"permissions\" cog for more options.\n⚠ The channel will be cloned, and then **deleted**."
  },
  "MemberPrefix": {
    "memberprefix": "Sets [botname]'s prefix(es) for you only.\nWarning: This is not additive. It will replace all current prefixes.\nThe real prefixes will no longer work for you.\n\n**Examples:**\n    - `[p]memberprefix !`\n    - `[p]memberprefix \"! \"` - Quotes are needed to use spaces in prefixes.\n    - `[p]memberprefix ! ? .` - Sets multiple prefixes.\n**Arguments:**\n    - `<prefixes...>` - The prefixes the bot will respond for you only.",
    "setmemberprefix": "Configure MemberPrefix."
  },
  "ChessGame": {
    "chess": "manage chess games"
  },
  "ModRoles": {
    "assignrole": "Assign a role to a member.\n\nNOTE: The role is case sensitive!",
    "modroles": "Settings for assignable roles.",
    "unassignrole": "Unassign a role from a member.\n\nNOTE: The role is case sensitive!"
  },
  "RunCode": {
    "runtio": "Run a code in a langage, with Tio API.\n\nArguments:\n- `verbose`: Without this mode, only the programme output will be sent, without any additional information. In case of an error, it will be used automatically.\n- `language`: If not specified, the command will try to \"guess\" with the file extension or Discord Markdown syntax.\n- `parameters`: Optional option to send with the request. `inputs:input1|input2|input3`, `compiler_flags:flag1|flag2|flag3`, `command_line_options:option1|option2|option3` and `args:arg1|arg2|arg3`.\n- `code`: May be normal code, but also an attached file, or a link from [pastebin](https://pastebin.com), [Github gist](https://gist.github.com) or another \"raw\" website.\n          If you use a link, your command must end with this syntax: `link=<link>` (no space around `=`). You may also not provide it and upload an attachment instead.",
    "setruncode": "View RunCode options.",
    "runcode": "Run a code in a langage, with Wandbox API.\n\nArguments:\n- `verbose`: Without this mode, only the programme output will be sent, without any additional information. In case of an error, it will be used automatically.\n- `language`: If not specified, the command will try to \"guess\" with the file extension or Discord Markdown syntax.\n- `parameters`: Optional option to send with the request. `engine:1/cpython-3.10.2`, `input:<input>`, `compiler_options:option1|option2|option3` and `runtime_options:option1|option2|option3`.\n- `code`: May be normal code, but also an attached file, or a link from [pastebin](https://pastebin.com), [Github gist](https://gist.github.com) or another \"raw\" website.\n          If you use a link, your command must end with this syntax: `link=<link>` (no space around `=`). You may also not provide it and upload an attachment instead."
  },
  "MemberHistory": {
    "memberhistory": "No description available."
  },
  "RoleAssigner": {
    "roleassigner": "Role assigner, one role per user from a list of roles."
  },
  "Pinboard": {
    "pinboard": "Change the list of active pinned messages",
    "setpinboard": "Change the list of active pinned messages"
  },
  "UnbanAll": {
    "unbanall": "Unban all users from the server."
  },
  "Hunting": {
    "hunting": "Hunting, it hunts birds and things that fly."
  },
  "AltMarker": {
    "amset": "Set altmarker settings",
    "alt": "Mark or unmark an alt acount"
  },
  "NetSpeed": {
    "netspeed": "Test the internet speed of the server your bot is hosted on."
  },
  "Rift": {
    "send": "Send a message to the specified destinations.\n\nEditing or deleting the message you send will still forward\nto the bot's reposts, as in normal rifts.",
    "rift": "Communicate with other channels through Red."
  },
  "RolloutGame": {
    "rolloutgameleaderboard": "Show RollOutGame leaderboard.",
    "rolloutgame": "Play a match of Rollout game.",
    "setrolloutgame": "Group of commands to set RollOutGame."
  },
  "DisurlVotesTracker": {
    "disurlvotestracker": "Commands to interact with DisurlVotesTracker.",
    "setdisurlvotestracker": "Commands to configure DisurlVotesTracker."
  },
  "VerifyAll": {
    "verifyall": "No description available."
  },
  "Color": {
    "color": "Group command for color commands"
  },
  "UpgradeChat": {
    "claim": "Claim your Upgrade.Chat purchases!",
    "upgradechat": "Base command for cog settings"
  },
  "SlashRequest": {
    "srequest": "Base command for slash feature requests."
  },
  "Wordle": {
    "wordlechannel": "Set channel where users post wordle scores.\nNot passing a channel stops the bot from parsing any channel.",
    "wordletop": "Show the Wordle top-5 leaderboard for total points and average attempts per solve.",
    "wordlestats": "Retrieve Wordle Statistics for a single user\n\nStatistics to be returned:\n- Solve count histogram (freq 1~6)\n- Total score (inverted score)\n- Current streak (days)",
    "wordlereparse": "Reparse wordle results from channel history. Number specifies message limit.\nThis might take a while for large channels."
  },
  "Aliases": {
    "aliases": "Get all the alias information you could ever want about a command.\n\nThis will show the main command, built-in aliases, global aliases and\nserver aliases.\n\n**Examples:**\n- `[p]aliases foo`\n- `[p]aliases foo bar`",
    "aliasesinfo": "No description available."
  },
  "MemoryGame": {
    "setmemorygame": "Group of commands to set MemoryGame.",
    "memorygameleaderboard": "Show MemoryGame leaderboard.",
    "memorygame": "Play to Memory game. Choose between `3x3`, `4x4` and `5x5` versions."
  },
  "Bl": {
    "bl": "Commands to manage the blacklist."
  },
  "Cooldown": {
    "cooldown": "Group command for working with cooldowns for commands."
  },
  "Pixl": {
    "pixl": "Start a Pixl game!\nGuess the image as it is slowly revealed",
    "pixlset": "Configure the Pixl game",
    "pixlboard": "View the Pixl leaderboard!\n\n**Arguments**\n`show_global`: show the global leaderboard\n\nexample: `[p]pixlb true`"
  },
  "IdeaBoard": {
    "idea": "Share an idea/make a suggestion.",
    "ideastats": "Display your current profile stats for suggestions and votes.",
    "approve": "Approve an idea/suggestion.",
    "reject": "Reject an idea/suggestion.",
    "viewvotes": "View the list of who has upvoted and who has downvoted a suggestion.",
    "refresh": "Refresh the buttons on a suggestion if it gets stuck.",
    "ideaset": "Manage IdeaBoard settings"
  },
  "Automuter": {
    "automuter": "Settings for the Automuter cog"
  },
  "SlashTags": {
    "slashtag": "Slash Tag management with TagScript.\n\nThese commands use TagScriptEngine.\n[This site](https://phen-cogs.readthedocs.io/en/latest/index.html) has documentation on how to use TagScript blocks.",
    "slashtagset": "Manage SlashTags settings."
  },
  "BankBackup": {
    "bankbackup": "Backup your guild's bank balances",
    "bankrestore": "Restore your guild's bank balances.\nAttach your backup file with this command.\n\n**Arguments**\n- `<set_or_add>`: Whether you want to `add` or `set` balances from the backup."
  },
  "BattleRoyale": {
    "battleroyale": "Battle Royale with other members!\n\n**Parameters:**\n- `delay`: min 10, max 20.\n- `skip`: will skip to results.",
    "setbattleroyale": "Configuration commands for BattleRoyale."
  },
  "DashIntGen": {
    "setdatapath": "Set the data path for cog integrations.",
    "setopenaikey": "Set the OpenAI API key for GPT-4 integration.",
    "dashint": "Generate advanced dashboard integration for a specified cog using GPT-4.",
    "listdashints": "List all cogs with dashboard integrations.",
    "removedashint": "Remove the dashboard integration for a specified cog."
  },
  "InfoControl": {
    "infocontrol": "Manage info enforcement settings."
  },
  "PyPi": {
    "pypi": "Get information about a project on PyPi."
  },
  "WebServerCog": {
    "webserver": "Manage the webserver settings."
  },
  "PyLavPlaylists": {
    "__command_playlist_play": "No description available."
  },
  "ModManager": {
    "modmanager": "Mod Manager Commands."
  },
  "ModLog": {
    "case": "Show the specified case.",
    "listcases": "List cases for the specified member.",
    "casesfor": "Display cases for the specified member.",
    "reason": "Specify a reason for a modlog case.\n\nPlease note that you can only edit cases you are\nthe owner of unless you are a mod, admin or server owner.\n\nIf no case number is specified, the latest case will be used."
  },
  "Minecraft": {
    "minecraft": "Get informations about Minecraft Java."
  },
  "DankUtils": {
    "taxcalc": "Calculate Dank Memer tax!",
    "hack": "Hack someone!"
  },
  "DiscordEdit": {
    "edittextchannel": "Commands for edit a text channel.",
    "editrole": "Commands for edit a role.",
    "editguild": "Commands for edit a guild.",
    "editthread": "Commands for edit a text channel.",
    "editvoicechannel": "Commands for edit a voice channel."
  },
  "DynamicChannelList": {
    "dynamicchannellist": "Group command for DynamicChannelList."
  },
  "TimeoutSelf": {
    "timeoutself": "Times you out for given time. Format example: `5d 3h 4m 2s`."
  },
  "SelfAssign": {
    "selfassign": "No description available."
  },
  "CodeSnippets": {
    "setcodesnippets": "Configure CodeSnippets.",
    "codesnippets": "Send code content from a GitHub/Gist/GitLab/BitBucket/Pastebin/Hastebin URL."
  },
  "ServerBlocker": {
    "serverblock": "Manage blocked servers."
  },
  "InfoChannel": {
    "infochannel": "Toggle info channel for this server",
    "infochannelset": "Toggle different types of infochannels"
  },
  "PyLavManagedNode": {
    "plmanaged": "Configure the managed Lavalink node used by PyLav"
  },
  "Economy": {
    "bank": "Base command to manage the bank.",
    "economyset": "Base command to manage Economy settings.",
    "slot": "Use the slot machine.\n\nExample:\n- `[p]slot 50`\n\n**Arguments**\n\n- `<bid>` The amount to bet on the slot machine. Winning payouts are higher when you bet more.",
    "leaderboard": "Print the leaderboard.\n\nDefaults to top 10.\n\nExamples:\n- `[p]leaderboard`\n- `[p]leaderboard 50` - Shows the top 50 instead of top 10.\n- `[p]leaderboard 100 yes` - Shows the top 100 from all servers.\n\n**Arguments**\n\n- `<top>` How many positions on the leaderboard to show. Defaults to 10 if omitted.\n- `<show_global>` Whether to include results from all servers. This will default to false unless specified.",
    "payday": "No description available.",
    "payouts": "Show the payouts for the slot machine."
  },
  "Evolution": {
    "evolution": "EVOLVE THE GREATEST ANIMALS OF ALL TIME!!!!"
  },
  "IsItDown": {
    "isitdown": "Check if the provided url is down\n\nAlias: iid"
  },
  "SecretSanta": {
    "secretsanta": "CSV assumes these columns, anything else is included in the message.\n\n    Email Address\n    What's your discord username?\n    do_not_match"
  },
  "RolesButtons": {
    "rolesbuttons": "Group of commands to use RolesButtons."
  },
  "LastPing": {
    "lastpingauto": "Create an auto updating message that shows how long this server has lasted without a mass mention.",
    "lastping": "View how long this server has lasted without a mass mention."
  },
  "StickBugged": {
    "stick": "get stick bugged lol"
  },
  "Sudo": {
    "sudo": "Use `[p]su`, `[p]unsu`, `[p]sudo` and `[p]sutimeout`."
  },
  "Shell": {
    "shellset": "Manage settings of the Shell cog.",
    "killshells": "Kill all shell processes started by Shell cog.",
    "shell": "Run shell command.",
    "shellq": "Run shell command quietly.\n\nIf command's exit code is 0, `[p]shellq` will only send a tick reaction.\nOtherwise, the result will be shown as with regular `[p]shell` command."
  },
  "LinkWarner": {
    "linkwarner": "Settings for LinkWarner cog."
  },
  "Partition": {
    "partition": "Partitions teams\nUsage: [p]partition <Members>"
  },
  "Mod": {
    "slowmode": "Changes thread's or text channel's slowmode setting.\n\nInterval can be anything from 0 seconds to 6 hours.\nUse without parameters to disable.",
    "tempban": "Temporarily ban a user from this server.\n\n`duration` is the amount of time the user should be banned for.\n`days` is the amount of days of messages to cleanup on tempban.\n\nExamples:\n- `[p]tempban @Twentysix Because I say so`\n    This will ban Twentysix for the default amount of time set by an administrator.\n- `[p]tempban @Twentysix 15m You need a timeout`\n    This will ban Twentysix for 15 minutes.\n- `[p]tempban 428675506947227648 1d2h15m 5 Evil person`\n    This will ban the user with ID 428675506947227648 for 1 day 2 hours 15 minutes and will delete the last 5 days of their messages.",
    "massban": "Mass bans user(s) from the server.\n\n`days` is the amount of days of messages to cleanup on massban.\n\nExample:\n   - `[p]massban 345628097929936898 57287406247743488 7 they broke all rules.`\n    This will ban all the added userids and delete 7 days worth of their messages.\n\nUser IDs need to be provided in order to ban\nusing this command.",
    "ban": "Ban a user from this server and optionally delete days of messages.\n\n`days` is the amount of days of messages to cleanup on ban.\n\nExamples:\n- `[p]ban 428675506947227648 7 Continued to spam after told to stop.`\n    This will ban the user with ID 428675506947227648 and it will delete 7 days worth of messages.\n- `[p]ban @Twentysix 7 Continued to spam after told to stop.`\n    This will ban Twentysix and it will delete 7 days worth of messages.\n\nA user ID should be provided if the user is not a member of this server.\nIf days is not a number, it's treated as the first word of the reason.\nMinimum 0 days, maximum 7. If not specified, the defaultdays setting will be used instead.",
    "softban": "Kick a user and delete 1 day's worth of their messages.",
    "kick": "Kick a user.\n\nExamples:\n- `[p]kick 428675506947227648 wanted to be kicked.`\n    This will kick the user with ID 428675506947227648 from the server.\n- `[p]kick @Twentysix wanted to be kicked.`\n    This will kick Twentysix from the server.\n\nIf a reason is specified, it will be the reason that shows up\nin the audit log.",
    "movedeletedelay": "Move deletedelay settings to core",
    "names": "Show previous usernames, global display names, and server nicknames of a member.",
    "moveignoredchannels": "Move ignored channels and servers to core",
    "modset": "Manage server administration settings.",
    "unban": "Unban a user from this server.\n\nRequires specifying the target user's ID. To find this, you may either:\n1. Copy it from the mod log case (if one was created), or\n2. Enable Developer Mode, go to Bans in this server's settings, right-click the user and select 'Copy ID'.",
    "rename": "Change a member's server nickname.\n\nLeaving the nickname argument empty will remove it.",
    "voiceban": "Ban a user from speaking and listening in the server's voice channels.",
    "voiceunban": "Unban a user from speaking and listening in the server's voice channels.",
    "voicekick": "Kick a member from a voice channel."
  },
  "MissingKids": {
    "ncmec": "Primary command group"
  },
  "Counter": {
    "count": "Group command for counting statistics"
  },
  "GuildManager": {
    "guildmanager": "Guild management commands."
  },
  "PyLavLyrics": {
    "pllyrics": "Lyric commands for PyLav"
  },
  "AutoMod": {
    "automod": "Commnads for interacting with automod"
  },
  "PyLavEffects": {
    "fxset": "Configure the Player behaviour when an effect is set",
    "eq": "Configure the Player behaviour when an equalizer preset is set"
  },
  "AntiSpam": {
    "antispamset": "Settings for antispam"
  },
  "CtxVar": {
    "ctxvar": "Commands for CtxVar."
  },
  "Star_Utils": {
    "star_utils": "All commands to manage all the cogs from StarCogs repo."
  },
  "FIFO": {
    "fifo": "Base command for handling scheduling of tasks",
    "fifoclear": "Debug command to clear all current fifo data"
  },
  "AutoConfigCleaner": {
    "setdellog": "Sets the log channel for purge notifications.",
    "canceldeletion": "Cancels the scheduled deletion for a specific guild."
  },
  "CmdChannel": {
    "cmdchannel": "Use `[p]cmdchannel`, `[p]cmduser` and `[p]cmduserchannel`."
  },
  "AdvancedBlacklist": {
    "localwhitelist": "Manage the local whitelist for your guild.",
    "advancedblacklistversion": "Get the version of Advanced Blacklist that [botname] is running",
    "blacklist": "Manage [botname]'s blacklist",
    "whitelist": "Manage [botname]'s whitelist",
    "localblacklist": "Manage the local blacklist for your guild."
  },
  "NickNamer": {
    "cnick": "Forcibly change a user's nickname.",
    "nickset": "Nicknamer settings",
    "unfreezenick": "Unfreeze a user's nickname.",
    "freezenick": "Freeze a users nickname.",
    "tempnick": "Temporarily rename a user.\n**IMPORTANT**: For better performance, temporary nicknames are checked in a 10 minute intervall.",
    "nickpurge": "Remove all nicknames in the server.",
    "nick": "Forcibly change a user's nickname to a predefined string."
  },
  "Cocktail": {
    "cocktail": "Get information about a cocktail / cocktail related commands. Supply 'random' to retrieve a random cocktail."
  },
  "Strikes": {
    "delstrike": "Remove a single strike by its ID.",
    "strikes": "Show all previous strikes for a user.",
    "strikecounts": "Show the strike count for multiple users.\n\n`[num_days]` is the number of past days of strikes to count.\nDefaults to 0, which means all strikes from the beginning of\ntime will be counted.\n\n`[limit]` is the maximum amount of members to show the\nstrike count for. Defaults to 100.\n\n`[sort_by]` is the column to sort the table by. May be one of\neither *count* or *date*. Defaults to *count*.\n\n`[sort_order]` is the order to sort in. It may be one of either\n*desc* for descending or *asc* for ascending. Defaults to\n*desc*.",
    "delstrikes": "Remove all strikes from a member.",
    "allstrikes": "Show all recent individual strikes.\n\n`[num_days]` is the number of past days of strikes to display.\nDefaults to 30. When 0, all strikes from the beginning of time\nwill be counted shown.",
    "strike": "Strike a user."
  },
  "PhenUtils": {
    "bypass": "Bypass a command's checks and cooldowns.",
    "execute": "Execute multiple commands at once. Split them using |.",
    "schedulecmd": "Schedule a command to be done later.",
    "do": "Repeats a command a specified number of times.\n\n`--sleep <int>` is an optional flag specifying how much time to wait between command invocations.",
    "timing": "Run a command timing execution and catching exceptions.",
    "reinvoke": "Reinvoke a command message.\n\nYou may reply to a message to reinvoke it or pass a message ID/link.",
    "loglevel": "Set the log output level."
  },
  "CaseInsensitive": {
    "caseinsensitiveinfo": "No description available."
  },
  "PyLavMigrator": {
    "plmigrate-revert": "Reverts the Playlist migration which can cause broken autoplaylists.\n\nPlease note that this will replace any settings already in PyLav.\n\nIf you are sure you want to proceed please run this command again with the confirm argument set to 1\ni.e `[p]plmigrate-revert 1`",
    "plm-playlists": "Migrate Audio Playlists to PyLav\n\nIf you are sure you want to proceed please run this command again with the confirmation argument set to 1\ni.e `[p]pl,-playlists 1`\n\nDo Note this is a best effort task, somethings may not migrate."
  },
  "BanMessage": {
    "banmessageset": "BanMessage settings."
  },
  "TacoShack": {
    "tacoshack": "Various TacoShack commands."
  },
  "UTTT": {
    "uttt": "Play a game of ultimate tic tac toe.\n\nYou may only play in the sub board that corresponds to the last\nspot your opponent played. If you are sent to a sub board that\nhas been finished, you can choose any sub board. First to win\nthree sub boards in a row wins.",
    "utttstop": "Stop the game of ultimate tic tac toe in this channel."
  },
  "NameChanger": {
    "changename": "Change your nickname using the bot!"
  },
  "DropdownsTexts": {
    "dropdownstexts": "Group of commands to use DropdownsTexts."
  },
  "Honeypot": {
    "sethoneypot": "Set the honeypot settings. Only the server owner can use this command for security reasons."
  },
  "Move": {
    "move": "No description available."
  },
  "SendCards": {
    "sendcard": "Send a card to a user.\n\nThe bot must share a server with the recipient. Provide\na user ID, mention, or username. The command will ask you further questions\nin order to get information for the card."
  },
  "NoDMs": {
    "nodms": "NoDMs configuration commands."
  },
  "Prefix": {
    "prefix": "Manage server prefixes.\n\nRunning this command without subcommands will show this server's prefixes.\n\n**Example:**\n`[p]prefix`"
  },
  "Spotifyembed": {
    "setspotifyembed": "Set Spotify Embed settings\n\nAutomatically send a reply to Spotify links with a link to the embed preview. Convenient for mobile users who can finally listen to music samples from Discord, without needing an account.",
    "spotifyembed": "Return a Spotify embed link\n\nCan set asMyself to true/false, for sending as webhook\n\n*Admins: To edit auto-reply and other settings, use  `[p]setspotifyembed`*"
  },
  "Mutes": {
    "voicemute": "Mute a user in their current voice channel.\n\n`<users...>` is a space separated list of usernames, ID's, or mentions.\n`[time_and_reason]` is the time to mute for and reason. Time is\nany valid time length such as `30 minutes` or `2 days`. If nothing\nis provided the mute will use the set default time or indefinite if not set.\n\nExamples:\n`[p]voicemute @member1 @member2 spam 5 hours`\n`[p]voicemute @member1 3 days`",
    "voiceunmute": "Unmute a user in their current voice channel.\n\n`<users...>` is a space separated list of usernames, ID's, or mentions.\n`[reason]` is the reason for the unmute.",
    "timeout": "Timeout users.\n\n`<users...>` is a space separated list of usernames, ID's, or mentions.\n`[time_and_reason]` is the time to timeout for and reason. Time is\nany valid time length such as `30 minutes` or `2 days`. If nothing\nis provided the timeout will use the set default time or give an error if not set.\n\nExamples:\n`[p]timeout @member1 @member2 spam 5 hours`\n`[p]timeout @member1 3 days`",
    "activemutes": "Displays active mutes on this server.",
    "mute": "Mute users.\n\n`<users...>` is a space separated list of usernames, ID's, or mentions.\n`[time_and_reason]` is the time to mute for and reason. Time is\nany valid time length such as `30 minutes` or `2 days`. If nothing\nis provided the mute will use the set default time or indefinite if not set.\n\nExamples:\n`[p]mute @member1 @member2 spam 5 hours`\n`[p]mute @member1 3 days`",
    "mutechannel": "Mute a user in the current text channel (or in the parent of the current thread).\n\n`<users...>` is a space separated list of usernames, ID's, or mentions.\n`[time_and_reason]` is the time to mute for and reason. Time is\nany valid time length such as `30 minutes` or `2 days`. If nothing\nis provided the mute will use the set default time or indefinite if not set.\n\nExamples:\n`[p]mutechannel @member1 @member2 spam 5 hours`\n`[p]mutechannel @member1 3 days`",
    "unmute": "Unmute users.\n\n`<users...>` is a space separated list of usernames, ID's, or mentions.\n`[reason]` is the reason for the unmute.",
    "forceunmute": "Force Unmute users who have had channel overwrite mutes in every channel.\n\n`<users...>` is a space separated list of usernames, ID's, or mentions.\n`[reason]` is the reason for the unmute.",
    "muteset": "Mute settings.",
    "unmutechannel": "Unmute a user in this channel (or in the parent of this thread).\n\n`<users...>` is a space separated list of usernames, ID's, or mentions.\n`[reason]` is the reason for the unmute."
  },
  "Hue": {
    "hue": "Commands for interacting with Hue lights"
  },
  "AFK": {
    "setafkcolor": "Set the embed color for AFK messages.",
    "setafknick": "Set a custom nickname template for AFK users. Use {displayname} as a placeholder for the user's display name.",
    "afk": "Set your AFK status with an optional reason."
  },
  "Giveaways": {
    "giveaway": "Manage the giveaway system"
  },
  "Pokemon": {
    "whosthatpokemon": "Guess Who's that Pokémon in 30 seconds!\n\nYou can optionally specify generation from `gen1` to `gen8` only.\n\n**Example:**\n- `[p]whosthatpokemon` - This will start a new Generation.\n- `[p]whosthatpokemon gen1` - This will pick any pokemon from generation 1 for you to guess.\n\n**Arguments:**\n- `[generation]` - Where you choose any generation from gen 1 to gen 9.",
    "pokeinfo": "Get information about a Pokémon.\n\n**Example:**\n- `[p]pokeinfo pikachu` - returns information about Pikachu.\n\n**Arguments:**\n- `<pokemon>` - The Pokémon you want to search for.\n    - If you dont know names, you can check the list from the [national pokedex](https://pokemondb.net/pokedex/national).",
    "tcgcard": "Fetch Pokémon cards based on Pokémon Trading Card Game (a.k.a Pokémon TCG).\n\n**Example:**\n- `[p]tcgcard pikachu` - returns information about pikachu's cards.\n\n**Arguments:**\n- `<query>` - The pokemon you want to search for."
  },
  "EmojiTools": {
    "emojitools": "Various tools for managing custom emojis in servers.\n\n`[p]emojitools add` has various tools to add emojis to the current server.\n`[p]emojitools delete` lets you remove emojis from the server.\n`[p]emojitools tozip` returns an instant `.zip` archive of emojis (w/o saving a folder permanently).\n`[p]emojitools save` allows you to save emojis to folders **in the cog data path**: this requires storage!"
  },
  "RequestGB": {
    "requestgb": "Group for global ban request commands."
  },
  "UptimeResponder": {
    "uptimeresponderinfo": "No description available.",
    "uptimeresponderport": "Get or set the port to run the simple web server on.\n\nRun the command on it's own (`[p]uptimeresponderport`) to see what it's\nset to at the moment, and to set it run `[p]uptimeresponderport 8080`, for example."
  },
  "MadTranslate": {
    "mtransseed": "Use a count-seed pair to (hopefully) get reproducible results.\n\nThey may be unreproducible if Google Translate changes its translations.\n\nThe count-seed pair is obtained from the main command, `mtrans`, in the embed footer.\n\n**Examples:**\n- `[p]mtrans 15-111111 This is a sentence.`\n- `[p]mtrans 25-000000 Here's another one.`",
    "madtranslateinfo": "No description available.",
    "madtranslate": "Translate something into lots of languages, then back to English!\n\n**Examples:**\n- `[p]mtrans This is a sentence.`\n- `[p]mtrans 25 Here's another one.`\n\nAt the bottom of the output embed is a count-seed pair. You can use this with\nthe `mtransseed` command to use the same language set."
  },
  "Decancer": {
    "decancer": "Remove special/cancerous characters from user nicknames\n\nParameters:\n    ctx (commands.Context): The command invocation context.\n    member (discord.Member): The user who's nickname is being modified.\n\nReturns:\n    None",
    "dehoist": "Decancer all members of the targeted role.\n\nRole defaults to all members of the server.",
    "decancerset": "Settings for Decancer"
  },
  "Tools": {
    "banlist": "Displays the server's banlist.",
    "cid": "Shows the channel id for the current channel.",
    "chinfo": "Shows channel information. Defaults to current text channel.",
    "eid": "Get an id for an emoji.",
    "einfo": "Emoji information.",
    "inrole": "Check members in the role specified.",
    "joined": "Show when a user joined the guild.",
    "listguilds": "List the guilds|servers the bot is in.",
    "listchannel": "List the channels of the current server",
    "newusers": "Lists the newest 5 members.\n\n`text_format` is the markdown language to use. Defaults to `py`.",
    "perms": "Fetch a specific user's permissions.",
    "rid": "Shows the id of a role.",
    "rinfo": "Shows role info.",
    "rolelist": "Displays the server's roles.",
    "access": "Check channel access",
    "sharedservers": "Shows shared server info. Defaults to author.",
    "sid": "Show the server id.",
    "stinfo": "Sticker information.\n\nAttach a sticker to the command message or provide a link to a message with a sticker.",
    "sinfo": "Shows server information.",
    "uid": "Get a member's id from a fuzzy name search.",
    "uimages": "Shows user image urls. Defaults to author.\n\n`embed` is a True/False value for whether to display the info in an embed.",
    "uinfo": "Shows user information. Defaults to author.",
    "whatis": "What is it?"
  },
  "Banana": {
    "banana": "Show someone your banana or eat theirs\n\n> [action] = `show` / `eat`        \n> example: `[p]banana @e-girl show`"
  },
  "NitroRole": {
    "nitrorole": "Settings for NitroRole cog."
  },
  "PersonalChannels": {
    "mychannel": "Control of personal channels."
  },
  "VoiceTools": {
    "voicetools": "Settings for voice tools."
  },
  "VirusTotal": {
    "virustotal": "No description available."
  },
  "Invites": {
    "invites": "Settings for the invite tracker."
  },
  "StripeIdentity": {
    "setidverifiedrole": "Set the role to give to users who have been completely ID verified.",
    "setverificationchannel": "Set the channel where verification results will be sent.",
    "bypassverification": "Bypass the verification process for a user.",
    "cancelverification": "Cancel a pending verification session for a user and remove it from the list of sessions.",
    "idcheck": "Perform a biometric verification of a Discord user's real-life identity.",
    "agecheck": "Perform an age check on a user using Stripe Identity.",
    "pending": "Show all pending verifications for users in the guild.",
    "setageverifiedrole": "Set the role to give to users who are verified as 18 or older.",
    "attest": "Allows a user to self-attest their government issued ID for analysis"
  },
  "LinkStorage": {
    "link": "Group command for managing links."
  },
  "AIEmote": {
    "aiemoteowner": "Owner only commands for aiemote\n        ",
    "aiemote": "Totally not glorified sentiment analysis™\n\nPicks a reaction for a message using gpt-3.5-turbo\n\nTo get started, please add a channel to the whitelist with:\n`[p]aiemote allow <#channel>`"
  },
  "BoostUtils": {
    "boostmessage": "Configuration commands for boost messages."
  },
  "ExclusiveRoles": {
    "listexclusives": "List all exclusive roles",
    "setexclusive": "Takes 2 Roles.\nRemoves the second role if the first role is assigned to a user in the future.",
    "retroscan": "Scans the entire user list for roles that have been set as exclusive.",
    "exclusivenow": "Takes 2 Roles. Removes the second role if both roles are present on a user.",
    "unexclusive": "Takes 2 roles and removes their exclusivity"
  },
  "RoleLocker": {
    "setrolelocker": "Configure RoleLocker settings globally.",
    "rolelock": "Base command for locking commands or cogs."
  },
  "ImageScanner": {
    "scanset": "Owner command to manage image scanner settings."
  },
  "GuildStats": {
    "guildstats": "Generate images with messages and voice stats, for members, roles, guilds, categories, text channels, voice channels and activities."
  },
  "UrlButtons": {
    "urlbuttons": "Group of commands to use UrlButtons."
  },
  "Lock": {
    "lock": "Lock a channel.\n\nProvide a role or member if you would like to lock it for them.\nYou can only lock a maximum of 10 things at once.\n\n**Examples:**\n- `[p]lock #testing`\n- `[p]lock 133251234164375552 @members`",
    "unlock": "Unlock a channel.\n\nProvide a role or member if you would like to unlock it for them.\nIf you would like to override-unlock for something, you can do so by pass `true` as the state argument.\nYou can only unlock a maximum of 10 things at once.\n\n**Examples:**\n- `[p]unlock #testing`\n- `[p]unlock 133251234164375552 true`",
    "unviewlock": "Allow users to view a channel.\n\nProvide a role or member if you would like to unlock it for them.\nIf you would like to override-unlock for something, you can do so by pass `true` as the state argument.\nYou can only unlock a maximum of 10 things at once.\n\n**Example:**\n- `[p]unviewlock #testing true`\n- `[p]unviewlock 133251234164375552 @boosters`",
    "viewlock": "Prevent users from viewing a channel.\n\nProvide a role or member if you would like to lock it for them.\nYou can only lock a maximum of 10 things at once.\n\n**Example:**\n- `[p]viewlock #testing`\n- `[p]viewlock 133251234164375552 @nubs`"
  },
  "QR": {
    "qr": "Create a QR code from text.\n\nWhen you scan this QR code, it will take you to google with the text query,\nor the website if you provide a website. That's essentially how QR codes work."
  },
  "ServerOwnerFinder": {
    "find_owner": "Find the owner of a server by its ID."
  },
  "Fluent": {
    "serverlocale": "Check the current server's locale",
    "fluent": "Base command",
    "translate": "Translate a message"
  },
  "HostInfo": {
    "hostinfo": "No description available."
  },
  "Cartographer": {
    "cartographerset": "Backup & Restore Tools",
    "cartographer": "Open the Backup/Restore menu\n\nThis cog can backup & restore the following:\n- Bans (including reason)\n- Categories (permissions/order)\n- Text channels (permissions/order)\n- Voice channels (permissions/order)\n- Forum channels  (permissions/order)[Not forum posts]\n- Roles (permissions/color/name/icon and what members they're assigned to)\n- Emojis (name/roles, Very slow and rate limit heavy)\n- Stickers (name/description, Very slow and rate limit heavy)\n- Members (roles and nicknames)\n- Messages (Optional, can be disabled)\n- Server icon/banner/splash/discovery splash/description/name\n- All server verification/security settings"
  },
  "Seen": {
    "seen": "Check when a member/role/channel/category was last active!"
  },
  "Spoop": {
    "spoop": "Sends a random spooky creepy quote to provided user"
  },
  "DevUtils": {
    "devutils": "Various development utilities."
  },
  "DiscordPolls": {
    "discordpolls": "Base command to manage polls."
  },
  "MultiCommands": {
    "multi": "Execute multiple commands separated by &&"
  },
  "HammerTime": {
    "hammertime": "Use this command followed by a date/time phrase to convert it to hammertime! \n(a discord time format that shows correctly for everyone that sees it)\n\nPut a person's name or mention before the time phrase to see what the time would be relative to them.\n\nExample usage:\n\n`[p]ht 1 hour ago`\n`[p]ht in 1 day and 12 hrs`\n`[p]ht irdumb Saturday at 6:30pm`",
    "hammertimeset": "Commands to set hammertime timezone and settings"
  },
  "DiscordSearch": {
    "discordsearch": "Search for a message on Discord in a channel.\n\nWarning: The bot uses the api for each search.\nArguments:\n`--author @user1 --author user2#1234 --author 0123456789`\n`--mention @user1 --mention user2#1234 --mention 0123456789`\n`--before now`\n`--after \"25/12/2000 00h00\"`\n`--pinned true`\n`--content \"AAA3A-cogs\"`\n`--regex \"\\[p\\]\"`\n`--contain link --contain embed --contain file`\n`--limit 100` (It's the limit of the number of messages taken into account in the search, not the number of results.)"
  },
  "Clone": {
    "clone": "Clones specified user",
    "set_color": "No description available."
  },
  "AutoBan": {
    "autoban": "Add term to the auto-ban list."
  },
  "Trigger": {
    "trigger": "Group command for triggers."
  },
  "DontPingStaff": {
    "dps": "Dont ping staff."
  },
  "PinOrder": {
    "pinorder": "Group of commands to set some messages to be always pinned on top in a specified order."
  },
  "BoosterRoles": {
    "boosterrole": "Manage booster roles"
  },
  "TempRoles": {
    "temproles": "Assign TempRoles roles to users, expiring after a set time."
  },
  "AutoDelete": {
    "autodelete": "Manage the AutoDelete settings."
  },
  "BannedCount": {
    "bannedcount": "Get the number of banned members in the server"
  },
  "OutOfContext": {
    "penny": "Penny for your thoughts? Posts a random out-of-context quote\nUsage: [p]penny",
    "ooc": "No description available."
  },
  "Dev": {
    "eval": "Execute asynchronous code.\n\nThis command wraps code into the body of an async function and then\ncalls and awaits it. The bot will respond with anything printed to\nstdout, as well as the return value of the function.\n\nThe code can be within a codeblock, inline code or neither, as long as they are not mixed and they are formatted correctly.\nYou can upload a file with the code to be executed, or reply to a message containing the command, from any bot.\n\nEnvironment Variables:\n    `ctx`      - the command invocation context\n    `bot`      - the bot object\n    `channel`  - the current channel object\n    `author`   - the command author's member object\n    `guild`    - the current guild object\n    `message`  - the command's message object\n    `_`        - the result of the last dev command\n    `aiohttp`  - the aiohttp library\n    `asyncio`  - the asyncio library\n    `discord`  - the discord.py library\n    `commands` - the redbot.core.commands module\n    `cf`       - the redbot.core.utils.chat_formatting module\n(See `[p]setdev getenvironment` for more.)",
    "debug": "Evaluate a statement of python code.\n\nThe bot will always respond with the return value of the code.\nIf the return value of the code is a coroutine, it will be awaited,\nand the result of that will be the bot's response.\n\nNote: Only one statement may be evaluated. Using certain restricted\nkeywords, e.g. yield, will result in a syntax error. For multiple\nlines or asynchronous code, see [p]repl or [p]eval.\n\nThe code can be within a codeblock, inline code or neither, as long as they are not mixed and they are formatted correctly.\nYou can upload a file with the code to be executed, or reply to a message containing the command, from any bot.\n\nEnvironment Variables:\n    `ctx`      - the command invocation context\n    `bot`      - the bot object\n    `channel`  - the current channel object\n    `author`   - the command author's member object\n    `guild`    - the current guild object\n    `message`  - the command's message object\n    `_`        - the result of the last dev command\n    `aiohttp`  - the aiohttp library\n    `asyncio`  - the asyncio library\n    `discord`  - the discord.py library\n    `commands` - the redbot.core.commands module\n    `cf`       - the redbot.core.utils.chat_formatting module\n(See `[p]setdev getenvironment` for more.)",
    "mimicmsg": "Dispatch a message event as if it were sent by a different user.\n\nCurrent message is used as a base (including attachments, embeds, etc.),\nthe content and author of the message are replaced with the given arguments.\n\nNote: If `content` isn't passed, the message needs to contain embeds, attachments,\nor anything else that makes the message non-empty.",
    "setdev": "Commands to configure Dev.",
    "replpause": "Pauses/resumes the REPL running in the current channel.",
    "repl": "Open an interactive REPL.\n\nThe REPL will only recognise code as messages which start with a\nbacktick. This includes codeblocks, and as such multiple lines can be\nevaluated.\n\nUse `exit()` or `quit` to exit the REPL session, prefixed with\na backtick so they may be interpreted.\n\nYou can upload a file with the code to be executed, or reply to a message containing the same command, for any bot.\n\nEnvironment Variables:\n    `ctx`      - the command invocation context\n    `bot`      - the bot object\n    `channel`  - the current channel object\n    `author`   - the command author's member object\n    `guild`    - the current guild object\n    `message`  - the command's message object\n    `_`        - the result of the last dev command\n    `aiohttp`  - the aiohttp library\n    `asyncio`  - the asyncio library\n    `discord`  - the discord.py library\n    `commands` - the redbot.core.commands module\n    `cf`       - the redbot.core.utils.chat_formatting module\n(See `[p]setdev getenvironment` for more.)",
    "eshell": "Execute Shell commands.\n\nThis command wraps the shell command into a Python code to invoke them.\n\nThe code can be within a codeblock, inline code or neither, as long as they are not mixed and they are formatted correctly.\nYou can upload a file with the code to be executed, or reply to a message containing the command, from any bot.",
    "mimic": "Mimic another user invoking a command.\n\nThe prefix must not be entered.",
    "bypasscooldowns": "Give bot owners the ability to bypass cooldowns.\n\nDoes not persist through restarts."
  },
  "SplitOrStealGame": {
    "splitorstealgame": "Play a match of Split Or Steal game.\n\nTwo player will have to click the button that they choose (`split` or `steal`).\n• If both choose `split` both of them win.\n• If both choose `steal`, both loose.\n• if one chooses `split` and one chooses `steal`, the one who choose `steal` will win."
  },
  "Coupon": {
    "coupon": "Coupon commands."
  },
  "Backup": {
    "backup": "Backup your installed cogs."
  },
  "TypeRacer": {
    "typerace": "Start a typing race!"
  },
  "Lenny": {
    "lenny": "☞⇀‿↼☞"
  },
  "ProjectPost": {
    "projectpost": "Enables the user to create and send an easy embed."
  },
  "Index": {
    "index": "Red-Index cog discoverability commands",
    "indexset": "Red-Index configuration"
  },
  "InviteBlocklist": {
    "inviteblock": "Settings for managing invite link blocking"
  },
  "AutoPublisher": {
    "autopublisher": "Manage AutoPublisher setting."
  },
  "Choose": {
    "choose": "Choose between multiple options.\nThere must be at least 2 options to pick from.\nSupports multiple separators: `;`, `,`, `\\n`, `|`, and `#`"
  },
  "ImageLog": {
    "imagelog": "View the current image log channel."
  },
  "CommandsButtons": {
    "commandsbuttons": "Group of commands to use CommandsButtons."
  },
  "Grafana": {
    "graph": "Render an image of a selected panel of [botname] metrics."
  },
  "Connect4": {
    "connect4": "Play Connect 4 with another player."
  },
  "Image": {
    "imgur": "Retrieve pictures from Imgur.\n\nMake sure to set the Client ID using `[p]imgurcreds`.",
    "giphycreds": "Explains how to set GIPHY API tokens.",
    "gifr": "Retrieve a random GIF from a Giphy search.\n\n- `<keywords...>`: The keywords used to generate a random GIF.",
    "gif": "Retrieve the first search result from Giphy.\n\n- `<keywords...>`: The keywords used to search Giphy.",
    "imgurcreds": "Explain how to set imgur API tokens."
  },
  "Theme": {
    "theme": "Play, view, or configure a user's set theme song(s)."
  },
  "Stocks": {
    "stocks": "Group command for stocks."
  },
  "SentryIO": {
    "sentryio": "Configure Sentry.IO stuffies"
  },
  "SlowMode": {
    "toggleslow": "Slow the chat\n\n`time` is the time in seconds users must wait after sending a message\nto be able to send another message."
  },
  "Quiz": {
    "quizset": "Quiz settings.",
    "quiz": "Play a kahoot-like trivia game.\nQuestions from the Open Trivia Database.\n\nIn this game, you will compete with other players to correctly answer each\nquestion as quickly as you can. You have 10 seconds to type the answer\nchoice before time runs out. The longer you take to say the right answer,\nthe fewer points you get. If you get it wrong, you get no points. Only the\nfirst valid answer (A, B, C, or D) will be recorded - be sure of the\nanswer before replying!\n\nTo end the game, stop responding to the questions and the game will time out."
  },
  "RandomEmoji": {
    "randomemoji": "Posts a random emoji from any server the bot has access to"
  },
  "Verifyer": {
    "verifyerset": "Settings for verifyer",
    "verify": "No description available."
  },
  "Pingtime": {
    "pingtime": "Ping pong."
  },
  "PersonalReact": {
    "personalreact": "Make the bot react to messages with your mention, reply, your user ID or a custom trigger!",
    "setpersonalreact": "Set PersonalReact settings."
  },
  "TransferChannel": {
    "transferchannel": "Transfer messages from a channel to another channel, with many options. This might take a long time.\nYou can specify the id of a channel from another server.\n\n`source` is partial name or ID of the source channel\n`destination` is partial name or ID of the destination channel\n`way` is the used way\n- `embed` Do you want to transfer the message as an embed?\n- `webhook` Do you want to send the messages with webhooks (name and avatar of the original author)?\n- `message`Do you want to transfer the message as a simple message?\nRemember that transfering other users' messages does not respect the TOS."
  },
  "LuigiPoker": {
    "poker": "The Luigi Poker minigame from New Super Mario Brothers."
  },
  "Twenty": {
    "twenty": "Starts a 2048 game inside of Discord."
  },
  "OnEdit": {
    "edittime": "Change how long the bot will listen for message edits to invoke as commands.\n\nDefaults to 5 seconds.\nSet to 0 to disable."
  },
  "SongShare": {
    "songshareset": "Set up the songshare cog"
  },
  "ConsoleClearer": {
    "clearconsole": "Completely clears [botname]'s console."
  },
  "DallE": {
    "dalleset": "Configure /imagine bot-wide."
  },
  "Grammar": {
    "grammar": "Get words related to the passed arguments.\n\nArguments must have `--` before them.\n   `meaning-like`/`ml`: Get words that mean close to what the passed word means.\n   `spelled-like`/`sp`: Get words that are spelled like the passed word.\n   `sounds-like`/`sl`: Get words that sound like the passed word.\n   `rhymes-with`/`rw`: Get words that rhyme with the passed word.\n   `adjectives-for`/`af`: Get adjectives for the passed noun.\n   `nouns-for`/`nf`: Get nouns for the passed adjective.\n   `comes-before`/`cb`: Get words that usually come before the passed word.\n   `comes-after`/`ca`: Get words that usually come after the passed word.\n   `topics`: Get words that are related to the passed topic.  Max 5 words.\n   `synonyms-for`/`sf`: Get synonyms for the passed word.\n   `antonyms-for`/`anf`: Get antonyms for the passed word.\n   `kind-of`/`ko`: Get the kind of what the passed word is (Computer -> Machine).\n   `more-specific-than`/`mst`: Get more specific nouns for the passed word (Ex: Machine -> Computer).\n   `homophones`/`h`: Get homophones of the passed word."
  },
  "CommandStats": {
    "cmd": "Group command for command stats.\n\nThis command does not log the issuing command."
  },
  "Hellohook": {
    "hellohook": "Hellohook settings\n\n**`[p]hellohook settings`** View current settings\n\n**`[p]hellohook setgreet`** Set a Greet/welcome message\n**`[p]hellohook setgreethook`**  Set #channel for Greet message\n\n**`[p]hellohook setleave`** Set a Leave message\n**`[p]hellohook setleavehook`**  Set #channel for Leave message\n\nDue to Discord limitations, you will have to create a webhook yourself in the channel you want the welcome message in. See **`[p]hellohook setgreethook`** for more details.\n\n[See Documentation >](https://coffeebank.github.io/coffee-cogs/hellohook)"
  },
  "StatusRotator": {
    "statusrotator": "StatusRotator command group"
  },
  "Crafter": {
    "craft": "Get crafting information for an item"
  },
  "OnlyAllow": {
    "onlyallow": "Only allow users to execute specific commands or commands from specific cogs, on specific servers!\n\nIf nothing is set in a server, all cogs/commands are permitted."
  },
  "HowGay": {
    "howgay": "Rate the gay level of a user or yourself."
  },
  "BotJoinMessage": {
    "botjoinmessage": "Commands to configure the bot join message."
  },
  "BotLogger": {
    "botlog": "Group of commands to configure bot logging."
  },
  "SecureInv": {
    "inv": "Create one or several invites with the specified parameters.\n\nFor specifying unlimited days or uses, use 0.\n\nDefaults can be set with `[p]inv set`.\nIf no defaults are found, channel defaults to the current channel,\ndays defaults to 1, and uses defaults to 0 (infinite).\n\nUses will always be finite if days is infinite."
  },
  "Simulator": {
    "simulator": "Main simulator command. Use me!",
    "dontsimulateme": "Excludes you from your messages being read and analyzed by the simulator."
  },
  "RandomTopic": {
    "rt": "Commands to configure Random Topic."
  },
  "WelcomeCount": {
    "welcomecount": "Manage settings for WelcomeCount."
  },
  "TongueTwisters": {
    "tonguetwister": "Generate a tonguetwister."
  },
  "ToDo": {
    "todoset": "Commands for configuring your todo list",
    "todo": "Your todo list inside Discord\n\n**Arguments**\n    - `index` The todo you want to view.\n    This is optional and if left out, it will show the help command instead"
  },
  "Fishing": {
    "cast": "Cast your line into the water."
  },
  "RndStatus": {
    "rndstatus": "Rndstatus group commands."
  },
  "AutoPlay": {
    "autoplay": "Toggle autoplay for a member.\n\nThis will cause the bot to automatically play music that\nthe member is listening to on Spotify.\n\nTo stop it, use `[p]autoplay` without a member, or\nuse a player command like `[p]stop` or `[p]play`."
  },
  "PyLavConfigurator": {
    "plset": "Change global settings for PyLav"
  },
  "ViewPermissions": {
    "viewpermissions": "Display permissions for roles and members, at guild level or in a specified channel.\n\n- You can specify several roles and members, and their permissions will be added together.\n- If you don't provide a channel, only permissions at the guild level will be displayed.\n- If you provide permission(s) and a channel, only these permissions will be displayed for this channel.\n- If you provide permission(s) and no channel, all guild channels will be displayed, with a tick if all the specified permissions are true in the channel.\n- If you provide permission(s) and no mentionables, the everyone role is used."
  },
  "RoleTools": {
    "roletools": "Commands for creating custom role settings"
  },
  "Shop": {
    "shop": "Shop commands."
  },
  "BlackFormatter": {
    "black": "Format a python file with black.\n\nYou need to attach a file to this command, and it's extension needs to be `.py`.\nYour `line_length` is black setting. If it is not provided, it defaults to the\nconfigured black line length (the default, unchanged, is 88)."
  },
  "Penis": {
    "penis": "Detects user's penis length\n\nThis is 100% accurate.\nEnter multiple users for an accurate comparison!"
  },
  "NoSpoiler": {
    "nospoiler": "Manage the spoiler filter settings."
  },
  "AutoGist": {
    "autogistset": "AutoGist settings."
  },
  "Sticky": {
    "sticky": "Sticky a message to this channel.",
    "unsticky": "Remove the sticky message from this channel.\n\nDeleting the sticky message will also unsticky it.\n\nDo `[p]unsticky yes` to skip the confirmation prompt."
  },
  "TalkNotifier": {
    "talk": "Notification related commands."
  },
  "Activities": {
    "activity": "Base command for creating activity invite links."
  },
  "TeachMe": {
    "teachme": "Retrieves a random Quote from ZenQuotes.io and sends it as an embed."
  },
  "BigText": {
    "big_text": "No description available."
  },
  "Say": {
    "say": "gimme a fact"
  },
  "GithubEndpoint": {
    "githubendpoint": "Manage messages sent from GitHub."
  },
  "MentionTracker": {
    "pinged": "Manage snippets."
  },
  "Purge": {
    "purge": "Removes messages that meet a criteria.\n\nMessages older than 14 days cannot be deleted.\n\n**Arguments:**\n- `<number`: The number of messages you want to delete.\n- `<channel>`: The channel you want to delete messages in. (Defaults to current channel)\n\n**Example:**\n- `[p]purge 10`\n- `[p]purge 2000`"
  },
  "EconomyTrickle": {
    "economytrickle": "Configure various settings"
  },
  "BanAppeal": {
    "appealset": "Set up ban appeal settings"
  },
  "GithubStuff": {
    "github": "Group command for github stuff"
  },
  "UselessFacts": {
    "uselessfact": "Get a random useless fact!"
  },
  "Hider": {
    "hider": "Hide commands from users in help."
  },
  "AntiLinks": {
    "antilinks": "Configuration options."
  },
  "ErrorLogs": {
    "errorlogs": "Manage error logs."
  },
  "Zipline": {
    "zipline": "Commands to interact with Zipline's API."
  },
  "Forward": {
    "pm": "PMs a person.\n\nSeparate version of [p]dm but allows for guild owners. This only works for users in the\nguild.",
    "forwardset": "Forwarding commands."
  },
  "Insult": {
    "insult": "Insult the user.\nUsage: [p]insult <Member>\nExample: [p]insult @Eris#0001"
  },
  "AdventureAlert": {
    "adventurealert": "Set notifications for all adventures"
  },
  "PyLavNodes": {
    "plnode": "Configure PyLav Nodes"
  },
  "AsSky": {
    "assky": "List of about 100 random ASCII emojis"
  },
  "ThreadBumper": {
    "keepalive": "Sends a ping to the thread to keep it alive."
  },
  "Freshmeat": {
    "freshmeat": "Show the members who joined in the specified timeframe\n\n`hours`: A number of hours to check for new members, must be above 0"
  },
  "RepoList": {
    "repolist": "List all installed repos and their available cogs."
  },
  "FluxImgGen": {
    "flux": "Generate Images using Flux!\n\n**Examples:**\n- `[p]flux cyberpunk cat`\n- `[p]f kermit --model=realism`\n\n**Arguments:**\n- `<prompt>` - A detailed description of the image you want to create.\n- `--model` - Choose the specific model to use for image generation.\n- `--size` - Aspect Ratio for the generated image.\n- `--seed` - Specific seed value for randomization.\n\n**Models:**\n- `base` - Base flux model.\n- `realism` - Flux model with a LORa fine tuned for realism.\n- `3d` - Flux model with a LORa fine tuned for 3d images.\n- `anime` - Flux model with a LORa fine tuned for anime.\n- `disney` - Flux model with a LORa fine tuned for disney."
  },
  "Otherbot": {
    "otherbot": "Otherbot configuration options."
  },
  "OwnerProtection": {
    "owner": "Group command for owner protection settings."
  },
  "RoleBoards": {
    "roleboard": "Get roleboards for this server.."
  },
  "BanChart": {
    "banchart": "Display a chart of the moderators with the most bans.\n\nThis can take a while for servers with lots of bans."
  },
  "NoBot": {
    "nobot": "Main setup command for NoBot"
  },
  "TempChannels": {
    "tempchannels": "Temporary text-channel creation (only 1 at the moment)."
  },
  "PyLavController": {
    "plcontrollerset": "Configure the PyLav Controller."
  },
  "TTT": {
    "ttt": "Tic Tac Toe "
  },
  "MessageCounter": {
    "messagestats": "Commands for tracking how many messages matched patterns."
  },
  "Aurora": {
    "aurora": "Settings and miscellaneous commands for Aurora."
  },
  "Aki": {
    "aki": "Start a game of Akinator!"
  },
  "DMAffiliates": {
    "dmaffiliate": "Settings for the affiliate messages."
  }
}